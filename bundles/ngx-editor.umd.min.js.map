{"version":3,"sources":["../../node_modules/tslib/tslib.es6.js","ng://ngx-editor/app/ngx-editor/common/utils/ngx-editor.utils.ts","ng://ngx-editor/app/ngx-editor/common/services/command-executor.service.ts","ng://ngx-editor/app/ngx-editor/common/services/message.service.ts","ng://ngx-editor/app/ngx-editor/common/ngx-editor.defaults.ts","ng://ngx-editor/app/ngx-editor/ngx-editor.component.ts","ng://ngx-editor/app/ngx-editor/ngx-grippie/ngx-grippie.component.ts","ng://ngx-editor/app/ngx-editor/ngx-editor-message/ngx-editor-message.component.ts","ng://ngx-editor/app/ngx-editor/ngx-editor-toolbar/ngx-editor-toolbar.component.ts","ng://ngx-editor/app/ngx-editor/ngx-editor.module.ts"],"names":["__decorate","decorators","target","key","desc","d","c","arguments","length","r","Object","getOwnPropertyDescriptor","Reflect","decorate","i","defineProperty","__metadata","metadataKey","metadataValue","metadata","canEnableToolbarOptions","value","toolbar","filter","array","indexOf","saveSelection","window","getSelection","sel","getRangeAt","rangeCount","document","createRange","restoreSelection","range","removeAllRanges","addRange","select","ngxEditorConfig","input","undefined","hasOwnProperty","resizer","CommandExecutorService","_http","this","savedSelection","prototype","execute","command","Error","execCommand","insertImage","imageURI","Utils.restoreSelection","insertVideo","videParams","isYoutubeLink","videoUrl","youtubeURL","width","height","insertHtml","checkTagSupportInBrowser","isValidURL","videoSrc","url","test","uploadImage","file","endPoint","headers","formData","FormData","append","requestHeader","HttpHeaders","headerKeys","keys","headerKeys_1","o","m","Symbol","iterator","call","next","done","tslib_1.__values","headerKeys_1_1","headerKey","set","req","HttpRequest","reportProgress","request","createLink","params","urlNewTab","newUrl","urlLink","urlText","type","insertColor","color","where","checkSelection","setFontSize","fontSize","deletedValue","deleteAndGetElement","isNumeric","fontPx","setFontName","fontName","fontFamily","html","slectedText","toString","deleteContents","tag","createElement","HTMLUnknownElement","Injectable","HttpClient","MessageService","message","Subject","getMessage","asObservable","sendMessage","clearMessageIn","milliseconds","_this","setTimeout","editable","spellcheck","minHeight","minWidth","translate","enableToolbar","showToolbar","placeholder","imageEndPoint","responseEndPoint","appendImageEndPointToResponse","codeMirrorConfig","lineNumbers","gutter","lineWrapping","mode","autofocus","htmlMode","NgxEditorComponent","_messageService","_commandExecutor","_renderer","config","blur","EventEmitter","focus","Utils","codeEditorMode","ngxCodeMirror","onTextAreaFocus","emit","onEditorFocus","textArea","nativeElement","onContentChange","onChange","togglePlaceholder","onTextAreaBlur","Utils.saveSelection","onTouched","resizeTextArea","offsetY","newHeight","parseInt","style","setSize","executeCommand","commandName","error","toggleCodeEditor","writeValue","refreshView","registerOnChange","fn","registerOnTouched","normalizedValue","setProperty","CodeMirror.fromTextArea","codeEditor","setValue","innerHTML","toTextArea","getValue","removeClass","ngxWrapper","addClass","getCollectiveParams","ngOnInit","getEditorConfiguration","offsetHeight","tslib_1.__decorate","Input","Output","ViewChild","static","NgxEditorComponent_1","Component","selector","template","providers","provide","NG_VALUE_ACCESSOR","useExisting","forwardRef","multi","Renderer2","NgxGrippieComponent","_editorComponent","oldY","grabber","onMouseMove","event","clientY","onMouseUp","onResize","preventDefault","HostListener","MouseEvent","Function","NgxEditorMessageComponent","ngxMessage","subscribe","clearMessage","NgxEditorToolbarComponent","_popOverConfig","_formBuilder","_commandExecutorService","uploadComplete","updloadPercentage","isUploading","selectedColorTab","hexColor","isImageUploader","outsideClick","placement","container","Utils.canEnableToolbarOptions","triggerCommand","buildUrlForm","urlForm","group","Validators","required","insertLink","urlPopover","hide","buildImageForm","imageForm","imageUrl","buildVideoForm","videoForm","onFileChange","e","files","Math","round","loaded","total","HttpResponse","body","imagePopover","videoPopover","colorPopover","fontSizePopover","onlyNumbers","charCode","PopoverConfig","FormBuilder","NgxEditorModule","NgModule","imports","CommonModule","FormsModule","ReactiveFormsModule","PopoverModule","forRoot","declarations","exports"],"mappings":"+xBAoDO,SAASA,EAAWC,EAAYC,EAAQC,EAAKC,GAChD,IAA2HC,EAAvHC,EAAIC,UAAUC,OAAQC,EAAIH,EAAI,EAAIJ,EAAkB,OAATE,EAAgBA,EAAOM,OAAOC,yBAAyBT,EAAQC,GAAOC,EACrH,GAAuB,iBAAZQ,SAAoD,mBAArBA,QAAQC,SAAyBJ,EAAIG,QAAQC,SAASZ,EAAYC,EAAQC,EAAKC,QACpH,IAAK,IAAIU,EAAIb,EAAWO,OAAS,EAAGM,GAAK,EAAGA,KAAST,EAAIJ,EAAWa,MAAIL,GAAKH,EAAI,EAAID,EAAEI,GAAKH,EAAI,EAAID,EAAEH,EAAQC,EAAKM,GAAKJ,EAAEH,EAAQC,KAASM,GAChJ,OAAOH,EAAI,GAAKG,GAAKC,OAAOK,eAAeb,EAAQC,EAAKM,GAAIA,EAOzD,SAASO,EAAWC,EAAaC,GACpC,GAAuB,iBAAZN,SAAoD,mBAArBA,QAAQO,SAAyB,OAAOP,QAAQO,SAASF,EAAaC,GC1DpH,SAAgBE,EAAwBC,EAAeC,GAEnD,QAAID,IAE0B,IAAtBC,EAAgB,UAIFA,EAAQC,OAAO,SAAAC,GACzB,OAAiC,IAA1BA,EAAMC,QAAQJ,KAGZb,QA+CzB,SAAgBkB,IACZ,GAAIC,OAAOC,aAAc,CACrB,IAAMC,EAAMF,OAAOC,eACnB,GAAIC,EAAIC,YAAcD,EAAIE,WACtB,OAAOF,EAAIC,WAAW,QAEvB,GAAIE,SAASJ,cAAgBI,SAASC,YACzC,OAAOD,SAASC,cAEpB,OAAO,KAQX,SAAgBC,EAAiBC,GAC7B,IAAIA,EAWA,OAAO,EAVP,GAAIR,OAAOC,aAAc,CACrB,IAAMC,EAAMF,OAAOC,eAGnB,OAFAC,EAAIO,kBACJP,EAAIQ,SAASF,IACN,EACJ,OAAIH,SAASJ,cAAgBO,EAAMG,QACtCH,EAAMG,UACC,QAFJ,wEAzDf,SAAuCjB,EAAYkB,EAAsBC,GAErE,IAAK,IAAM1B,KAAKyB,EACRzB,IAEI0B,EAAM1B,KAAO2B,YACbpB,EAAMP,GAAK0B,EAAM1B,IAGhBO,EAAMqB,eAAe5B,KACtBO,EAAMP,GAAKyB,EAAgBzB,KAKvC,OAAOO,aAQX,SAA0BsB,GACtB,MAAgB,UAAZA,GACO,8DC3Cb,SAAAC,EAAoBC,GAAAC,KAAAD,MAAAA,EANpBC,KAAAC,eAAsBN,UAuUxB,OAzTEG,EAAAI,UAAAC,QAAA,SAAQC,GAEN,IAAKJ,KAAKC,gBAA8B,yBAAZG,EAC1B,MAAM,IAAIC,MAAM,uBAGF,yBAAZD,EAKY,eAAZA,EAKY,qBAAZA,EAKJlB,SAASoB,YAAYF,GAAS,EAAO,MAJnClB,SAASoB,YAAY,eAAe,EAAO,OAL3CpB,SAASoB,YAAY,eAAe,EAAO,cAL3CpB,SAASoB,YAAY,wBAAwB,EAAM,SAuBvDR,EAAAI,UAAAK,YAAA,SAAYC,GACV,IAAIR,KAAKC,eAWP,MAAM,IAAII,MAAM,2BAVhB,GAAIG,GACeC,EAAuBT,KAAKC,kBAE1Bf,SAASoB,YAAY,eAAe,EAAOE,GAE1D,MAAM,IAAIH,MAAM,gBAe1BP,EAAAI,UAAAQ,YAAA,SAAYC,GACV,IAAIX,KAAKC,eAwBP,MAAM,IAAII,MAAM,2BAvBhB,GAAIM,GACeF,EAAuBT,KAAKC,gBAE3C,GAAID,KAAKY,cAAcD,EAAWE,UAAW,CAC3C,IAAMC,EAAa,kBAAoBH,EAAWI,MAAQ,aAAeJ,EAAWK,OAAS,SAC/EL,EAAWE,SAAW,cACpCb,KAAKiB,WAAWH,OACX,CAAA,IAAId,KAAKkB,yBAAyB,SAWvC,MAAM,IAAIb,MAAM,0BAThB,IAAIL,KAAKmB,WAAWR,EAAWE,UAK7B,MAAM,IAAIR,MAAM,qBAJhB,IAAMe,EAAW,iBAAmBT,EAAWI,MAAQ,aAAeJ,EAAWK,OAAS,kCACnDL,EAAWE,SAAW,aAC7Db,KAAKiB,WAAWG,KAqBpBtB,EAAAI,UAAAU,cAAR,SAAsBS,GAEpB,MADiB,wDACDC,KAAKD,IAOfvB,EAAAI,UAAAiB,WAAR,SAAmBE,GAEjB,MADkB,8EACDC,KAAKD,IASxBvB,EAAAI,UAAAqB,YAAA,SAAYC,EAAYC,EAAkBC,WAExC,IAAKD,EACH,MAAM,IAAIpB,MAAM,4CAGlB,IAAMsB,EAAqB,IAAIC,SAE/B,GAAIJ,EAAM,CAERG,EAASE,OAAO,OAAQL,GAExB,IAAIM,EAAgB,IAAIC,EAAAA,YAClBC,EAAapE,OAAOqE,KAAKP,OAC/B,IAAwB,IAAAQ,EFnCvB,SAAkBC,GACrB,IAAIC,EAAsB,mBAAXC,QAAyBF,EAAEE,OAAOC,UAAWtE,EAAI,EAChE,OAAIoE,EAAUA,EAAEG,KAAKJ,GACd,CACHK,KAAM,WAEF,OADIL,GAAKnE,GAAKmE,EAAEzE,SAAQyE,OAAI,GACrB,CAAE5D,MAAO4D,GAAKA,EAAEnE,KAAMyE,MAAON,KE6BlBO,CAAAV,GAAUW,EAAAT,EAAAM,QAAAG,EAAAF,KAAAE,EAAAT,EAAAM,OAAE,CAA/B,IAAMI,EAASD,EAAApE,MAClBuD,EAAgBA,EAAce,IAAID,EAAWlB,EAAQkB,yGAEvD,IAAME,EAAM,IAAIC,EAAAA,YAAY,OAAQtB,EAAUE,EAAU,CACtDqB,gBAAgB,EAChBtB,QAASI,IAGX,OAAO9B,KAAKD,MAAMkD,QAAQH,GAG1B,MAAM,IAAIzC,MAAM,kBASpBP,EAAAI,UAAAgD,WAAA,SAAWC,GAET,IAAInD,KAAKC,eAsBP,MAAM,IAAII,MAAM,2BAlBhB,GAAI8C,EAAOC,UAAW,CACpB,IAAMC,EAAS,YAAcF,EAAOG,QAAU,qBAAuBH,EAAOI,QAAU,OAEtF,GAAqC,UAAjCrE,SAASJ,eAAe0E,KAM1B,MAAM,IAAInD,MAAM,yDALCI,EAAuBT,KAAKC,iBAE3CD,KAAKiB,WAAWoC,OAKf,CACY5C,EAAuBT,KAAKC,iBAE3Cf,SAASoB,YAAY,cAAc,EAAO6C,EAAOG,WAgBzDxD,EAAAI,UAAAuD,YAAA,SAAYC,EAAeC,GAEzB,IAAI3D,KAAKC,eAWP,MAAM,IAAII,MAAM,2BAVCI,EAAuBT,KAAKC,iBAC7BD,KAAK4D,mBACL,cAAVD,EACFzE,SAASoB,YAAY,aAAa,EAAOoD,GAEzCxE,SAASoB,YAAY,eAAe,EAAOoD,KAgBnD5D,EAAAI,UAAA2D,YAAA,SAAYC,GAEV,IAAI9D,KAAKC,iBAAkBD,KAAK4D,iBAmB9B,MAAM,IAAIvD,MAAM,2BAlBhB,IAAM0D,EAAe/D,KAAKgE,sBAE1B,GAAID,GAEetD,EAAuBT,KAAKC,gBAG3C,GAAID,KAAKiE,UAAUH,GAAW,CAC5B,IAAMI,EAAS,2BAA6BJ,EAAW,QAAUC,EAAe,UAChF/D,KAAKiB,WAAWiD,OACX,CACCA,EAAS,2BAA6BJ,EAAW,MAAQC,EAAe,UAC9E/D,KAAKiB,WAAWiD,KAe1BpE,EAAAI,UAAAiE,YAAA,SAAYC,GAEV,IAAIpE,KAAKC,iBAAkBD,KAAK4D,iBAmB9B,MAAM,IAAIvD,MAAM,2BAlBhB,IAAM0D,EAAe/D,KAAKgE,sBAE1B,GAAID,GAEetD,EAAuBT,KAAKC,gBAG3C,GAAID,KAAKiE,UAAUG,GAAW,CAC5B,IAAMC,EAAa,6BAA+BD,EAAW,QAAUL,EAAe,UACtF/D,KAAKiB,WAAWoD,OACX,CACCA,EAAa,6BAA+BD,EAAW,MAAQL,EAAe,UACpF/D,KAAKiB,WAAWoD,KAWlBvE,EAAAI,UAAAe,WAAR,SAAmBqD,GAIjB,IAFuBpF,SAASoB,YAAY,cAAc,EAAOgE,GAG/D,MAAM,IAAIjE,MAAM,oCAWZP,EAAAI,UAAA+D,UAAR,SAAkB1F,GAChB,MAAO,cAAc+C,KAAK/C,IAIpBuB,EAAAI,UAAA8D,oBAAR,WAEE,IAAIO,EAEJ,QAAIvE,KAAKC,iBACPsE,EAAcvE,KAAKC,eAAeuE,WAClCxE,KAAKC,eAAewE,iBACbF,IAQHzE,EAAAI,UAAA0D,eAAR,WAIE,GAA2B,IAFP5D,KAAKC,eAAeuE,WAExB9G,OACd,MAAM,IAAI2C,MAAM,qBAGlB,OAAO,GAQDP,EAAAI,UAAAgB,yBAAR,SAAiCwD,GAC/B,QAASxF,SAASyF,cAAcD,aAAgBE,qBAvUvC9E,EAAsB5C,EAAA,CADlC2H,EAAAA,oCAU4BC,EAAAA,cAThBhF,MCIbiF,EAAA,WAKE,SAAAA,IAFQ/E,KAAAgF,QAA2B,IAAIC,EAAAA,QAiCzC,OA3BEF,EAAA7E,UAAAgF,WAAA,WACE,OAAOlF,KAAKgF,QAAQG,gBAQtBJ,EAAA7E,UAAAkF,YAAA,SAAYJ,GACVhF,KAAKgF,QAAQxC,KAAKwC,GAClBhF,KAAKqF,eAvBQ,MAgCPN,EAAA7E,UAAAmF,eAAR,SAAuBC,GAAvB,IAAAC,EAAAvF,KACEwF,WAAW,WACTD,EAAKP,QAAQxC,KAAK7C,YACjB2F,IAhCMP,EAAc7H,EAAA,CAD1B2H,EAAAA,wCACYE,GAAb,GCNatF,EAAkB,CAC7BgG,UAAU,EACVC,YAAY,EACZ1E,OAAQ,OACR2E,UAAW,IACX5E,MAAO,OACP6E,SAAU,IACVC,UAAW,MACXC,eAAe,EACfC,aAAa,EACbC,YAAa,qBACbC,cAAe,GACfzH,QAAS,CACP,CAAC,OAAQ,SAAU,YAAa,gBAAiB,cAAe,aAChE,CAAC,WAAY,WAAY,SACzB,CAAC,cAAe,gBAAiB,eAAgB,cAAe,SAAU,WAC1E,CAAC,MAAO,OAAQ,SAAU,eAAgB,OAAQ,QAClD,CAAC,YAAa,aAAc,mBAAoB,iBAAkB,cAAe,iBACjF,CAAC,OAAQ,SAAU,QAAS,SAC5B,CAAC,SAEHkD,QAAS,GACTwE,iBAAkB,KAClBC,+BAA+B,GAMpBC,EAAmB,CAC9BC,aAAa,EACbC,QAAQ,EACRC,cAAc,EACdC,KAAM,YACNC,WAAW,EACXC,UAAU,gBC+DV,SAAAC,EACUC,EACAC,EACAC,GAFA9G,KAAA4G,gBAAAA,EACA5G,KAAA6G,iBAAAA,EACA7G,KAAA8G,UAAAA,EAvCD9G,KAAAH,QAAU,QAOVG,KAAA+G,OAAStH,EASRO,KAAAgH,KAA6B,IAAIC,EAAAA,aAEjCjH,KAAAkH,MAA8B,IAAID,EAAAA,aAM5CjH,KAAAmH,MAAaA,EACbnH,KAAAoH,gBAAiB,EAETpH,KAAAqH,cAAqB1H,gBAyN/B,SAzRagH,EAkFXA,EAAAzG,UAAAoH,gBAAA,WACEtH,KAAKkH,MAAMK,KAAK,UAKlBZ,EAAAzG,UAAAsH,cAAA,WACExH,KAAKyH,SAASC,cAAcR,SAO9BP,EAAAzG,UAAAyH,gBAAA,SAAgBrD,GAEe,mBAAlBtE,KAAK4H,WACd5H,KAAK4H,SAAStD,GACdtE,KAAK6H,kBAAkBvD,KAM3BqC,EAAAzG,UAAA4H,eAAA,WAGE9H,KAAK6G,iBAAiB5G,eAAiB8H,IAET,mBAAnB/H,KAAKgI,WACdhI,KAAKgI,YAEPhI,KAAKgH,KAAKO,KAAK,SASjBZ,EAAAzG,UAAA+H,eAAA,SAAeC,GACb,IAAIC,EAAYC,SAASpI,KAAKgB,OAAQ,IACtCmH,GAAaD,EACblI,KAAKgB,OAASmH,EAAY,KAC1BnI,KAAKyH,SAASC,cAAcW,MAAMrH,OAAShB,KAAKgB,OAK5ChB,KAAKoH,gBACPpH,KAAKqH,cAAciB,QAAQ,OAAQtI,KAAKgB,SAU5C2F,EAAAzG,UAAAqI,eAAA,SAAeC,GAEb,GAAoB,SAAhBA,EAKJ,IACExI,KAAK6G,iBAAiB1G,QAAQqI,GAC9B,MAAOC,GACPzI,KAAK4G,gBAAgBxB,YAAYqD,EAAMzD,cAPvChF,KAAK0I,oBAkBT/B,EAAAzG,UAAAyI,WAAA,SAAWpK,GAETyB,KAAK6H,kBAAkBtJ,GAET,OAAVA,GAAkBA,IAAUoB,WAAuB,KAAVpB,GAA0B,SAAVA,IAC3DA,EAAQ,MAGVyB,KAAK4I,YAAYrK,IASnBoI,EAAAzG,UAAA2I,iBAAA,SAAiBC,GACf9I,KAAK4H,SAAWkB,GASlBnC,EAAAzG,UAAA6I,kBAAA,SAAkBD,GAChB9I,KAAKgI,UAAYc,GAQnBnC,EAAAzG,UAAA0I,YAAA,SAAYrK,GACV,IAAMyK,EAA4B,OAAVzK,EAAiB,GAAKA,EAC9CyB,KAAK8G,UAAUmC,YAAYjJ,KAAKyH,SAASC,cAAe,YAAasB,IAOvErC,EAAAzG,UAAAwI,iBAAA,WACE1I,KAAKoH,gBAAkBpH,KAAKoH,eAExBpH,KAAKoH,gBAEPpH,KAAKqH,cAAgB6B,EAAAA,aAAwBlJ,KAAKmJ,WAAWzB,cAAetB,GAG5EpG,KAAKqH,cAAc+B,SAASpJ,KAAKyH,SAASC,cAAc2B,WAGxDrJ,KAAKqH,cAAciB,QAAQ,OAAQtI,KAAKgB,UAKxChB,KAAKqH,cAAciC,aAGnBtJ,KAAK4I,YAAY5I,KAAKqH,cAAckC,YACpCvJ,KAAK2H,gBAAgB3H,KAAKqH,cAAckC,cAW5C5C,EAAAzG,UAAA2H,kBAAA,SAAkBtJ,GACXA,GAAmB,SAAVA,GAA8B,KAAVA,EAGhCyB,KAAK8G,UAAU0C,YAAYxJ,KAAKyJ,WAAW/B,cAAe,oBAF1D1H,KAAK8G,UAAU4C,SAAS1J,KAAKyJ,WAAW/B,cAAe,qBAU3Df,EAAAzG,UAAAyJ,oBAAA,WACE,MAAO,CACLlE,SAAUzF,KAAKyF,SACfC,WAAY1F,KAAK0F,WACjBM,YAAahG,KAAKgG,YAClBH,UAAW7F,KAAK6F,UAChB7E,OAAQhB,KAAKgB,OACb2E,UAAW3F,KAAK2F,UAChB5E,MAAOf,KAAKe,MACZ6E,SAAU5F,KAAK4F,SACfE,cAAe9F,KAAK8F,cACpBC,YAAa/F,KAAK+F,YAClBE,cAAejG,KAAKiG,cACpBzH,QAASwB,KAAKxB,UAIlBmI,EAAAzG,UAAA0J,SAAA,WAIE5J,KAAK+G,OAAS/G,KAAKmH,MAAM0C,uBAAuB7J,KAAK+G,OAAQtH,EAAiBO,KAAK2J,uBAEnF3J,KAAKgB,OAAShB,KAAKgB,QAAUhB,KAAKyH,SAASC,cAAcoC,aAEzD9J,KAAKuI,eAAe,yBAlRbwB,EAAAA,CAARC,EAAAA,iEAEQD,EAAAA,CAARC,EAAAA,mEAEQD,EAAAA,CAARC,EAAAA,mEAMQD,EAAAA,CAARC,EAAAA,iEAEQD,EAAAA,CAARC,EAAAA,8DAEQD,EAAAA,CAARC,EAAAA,iEAEQD,EAAAA,CAARC,EAAAA,6DAEQD,EAAAA,CAARC,EAAAA,gEAQQD,EAAAA,CAARC,EAAAA,wBAAiBpM,uCAQTmM,EAAAA,CAARC,EAAAA,+DAOQD,EAAAA,CAARC,EAAAA,8DAEQD,EAAAA,CAARC,EAAAA,oEAEQD,EAAAA,CAARC,EAAAA,sEAEQD,EAAAA,CAARC,EAAAA,qEAGSD,EAAAA,CAATE,EAAAA,yBAAehD,EAAAA,0CAEN8C,EAAAA,CAATE,EAAAA,yBAAgBhD,EAAAA,2CAEyB8C,EAAAA,CAAzCG,EAAAA,UAAU,cAAe,CAACC,UAAQ,4DACSJ,EAAAA,CAA3CG,EAAAA,UAAU,gBAAiB,CAACC,UAAQ,8DACIJ,EAAAA,CAAxCG,EAAAA,UAAU,aAAc,CAACC,UAAQ,8DA3DvBxD,EAAkByD,EAAAlN,EAAA,CAb9BmN,EAAAA,UAAU,CACTC,SAAU,iBACVC,SAAA,+nCAEAC,UAAW,CACT,CACEC,QAASC,EAAAA,kBACTC,YAAaC,EAAAA,WAAW,WAAM,OAAAR,IAC9BS,OAAO,klCA+EgB9F,EACCjF,EACPgL,EAAAA,aA5EVnE,mBCLX,SAAAoE,EAAoBC,GAAAhL,KAAAgL,iBAAAA,EATpBhL,KAAAiL,KAAO,EAEPjL,KAAAkL,SAAU,EAyCZ,OA1BkDH,EAAA7K,UAAAiL,YAAA,SAAYC,GAErDpL,KAAKkL,UAIVlL,KAAKgL,iBAAiB/C,eAAemD,EAAMC,QAAUrL,KAAKiL,MAC1DjL,KAAKiL,KAAOG,EAAMC,UAS0BN,EAAA7K,UAAAoL,UAAA,SAAUF,GACtDpL,KAAKkL,SAAU,GAGsBH,EAAA7K,UAAAqL,SAAA,SAASH,EAAmBvL,GACjEG,KAAKkL,SAAU,EACflL,KAAKiL,KAAOG,EAAMC,QAClBD,EAAMI,kBAvBwCzB,EAAAA,CAA/C0B,EAAAA,aAAa,qBAAsB,CAAC,4DAA8BC,4EAgBrB3B,EAAAA,CAA7C0B,EAAAA,aAAa,mBAAoB,CAAC,4DAA4BC,0EAIxB3B,EAAAA,CAAtC0B,EAAAA,aAAa,YAAa,CAAC,4DAA2BC,WAAsBC,uEA1ClEZ,EAAmB7N,EAAA,CAN/BmN,EAAAA,UAAU,CACTC,SAAU,kBACVC,SAAA,w+BAkBsC5D,KAd3BoE,mBCSX,SAAAa,EAAoBhF,GAApB,IAAArB,EAAAvF,KAAoBA,KAAA4G,gBAAAA,EALpB5G,KAAA6L,WAAalM,UAMXK,KAAK4G,gBAAgB1B,aAAa4G,UAAU,SAAC9G,GAAoB,OAAAO,EAAKsG,WAAa7G,IAUvF,OAJE4G,EAAA1L,UAAA6L,aAAA,WACE/L,KAAK6L,WAAalM,WAhBTiM,EAAyB1O,EAAA,CANrCmN,EAAAA,UAAU,CACTC,SAAU,yBACVC,SAAA,0SAYqCxF,KAR1B6G,mBC4CX,SAAAI,EAAoBC,EACAC,EACAtF,EACAuF,GAHAnM,KAAAiM,eAAAA,EACAjM,KAAAkM,aAAAA,EACAlM,KAAA4G,gBAAAA,EACA5G,KAAAmM,wBAAAA,EAjCpBnM,KAAAoM,gBAAiB,EAEjBpM,KAAAqM,kBAAoB,EAEpBrM,KAAAsM,aAAc,EAEdtM,KAAAuM,iBAAmB,YAEnBvM,KAAAoE,SAAW,GAEXpE,KAAA8D,SAAW,GAEX9D,KAAAwM,SAAW,GAEXxM,KAAAyM,iBAAkB,EAcRzM,KAAAG,QAAgC,IAAI8G,EAAAA,aAM5CjH,KAAKiM,eAAeS,cAAe,EACnC1M,KAAKiM,eAAeU,UAAY,SAChC3M,KAAKiM,eAAeW,UAAY,OAmNpC,OA3MEZ,EAAA9L,UAAA5B,wBAAA,SAAwBC,GACtB,OAAOsO,EAA8BtO,EAAOyB,KAAK+G,OAAgB,UAQnEiF,EAAA9L,UAAA4M,eAAA,SAAe1M,GACbJ,KAAKG,QAAQoH,KAAKnH,IAMpB4L,EAAA9L,UAAA6M,aAAA,WAEE/M,KAAKgN,QAAUhN,KAAKkM,aAAae,MAAM,CACrC3J,QAAS,CAAC,GAAI,CAAC4J,EAAAA,WAAWC,WAC1B5J,QAAS,CAAC,GAAI,CAAC2J,EAAAA,WAAWC,WAC1B/J,UAAW,EAAC,MAShB4I,EAAA9L,UAAAkN,WAAA,WAEE,IACEpN,KAAKmM,wBAAwBjJ,WAAWlD,KAAKgN,QAAQzO,OACrD,MAAOkK,GACPzI,KAAK4G,gBAAgBxB,YAAYqD,EAAMzD,SAIzChF,KAAK+M,eAEL/M,KAAKqN,WAAWC,QAQlBtB,EAAA9L,UAAAqN,eAAA,WAEEvN,KAAKwN,UAAYxN,KAAKkM,aAAae,MAAM,CACvCQ,SAAU,CAAC,GAAI,CAACP,EAAAA,WAAWC,cAS/BnB,EAAA9L,UAAAwN,eAAA,WAEE1N,KAAK2N,UAAY3N,KAAKkM,aAAae,MAAM,CACvCpM,SAAU,CAAC,GAAI,CAACqM,EAAAA,WAAWC,WAC3BnM,OAAQ,CAAC,IACTD,MAAO,CAAC,OAWZiL,EAAA9L,UAAA0N,aAAA,SAAaC,GAAb,IAAAtI,EAAAvF,KAKE,GAHAA,KAAKoM,gBAAiB,EACtBpM,KAAKsM,aAAc,EAEfuB,EAAEzQ,OAAO0Q,MAAMpQ,OAAS,EAAG,CAC7B,IAAM8D,EAAOqM,EAAEzQ,OAAO0Q,MAAM,GAE5B,IACE9N,KAAKmM,wBAAwB5K,YAAYC,EAAMxB,KAAK+G,OAAOd,cAAejG,KAAK+G,OAAOrF,SAASoK,UAAU,SAAAV,GAMvG,GAJIA,EAAM5H,OACR+B,EAAK8G,kBAAoB0B,KAAKC,MAAM,IAAM5C,EAAM6C,OAAS7C,EAAM8C,QAG7D9C,aAAiB+C,EAAAA,aAAc,CACjC,IACM5I,EAAKwB,OAAOb,iBACdX,EAAK4G,wBAAwB5L,YAAYgF,EAAKwB,OAAOb,iBAAmBkF,EAAMgD,KAAK/M,KAEnFkE,EAAK4G,wBAAwB5L,YAAY6K,EAAMgD,KAAK/M,KAEtD,MAAOoH,GACPlD,EAAKqB,gBAAgBxB,YAAYqD,EAAMzD,SAEzCO,EAAK6G,gBAAiB,EACtB7G,EAAK+G,aAAc,KAGvB,MAAO7D,GACPzI,KAAK4G,gBAAgBxB,YAAYqD,EAAMzD,SACvChF,KAAKoM,gBAAiB,EACtBpM,KAAKsM,aAAc,KASzBN,EAAA9L,UAAAK,YAAA,WACE,IACEP,KAAKmM,wBAAwB5L,YAAYP,KAAKwN,UAAUjP,MAAMkP,UAC9D,MAAOhF,GACPzI,KAAK4G,gBAAgBxB,YAAYqD,EAAMzD,SAIzChF,KAAKuN,iBAELvN,KAAKqO,aAAaf,QAMpBtB,EAAA9L,UAAAQ,YAAA,WACE,IACEV,KAAKmM,wBAAwBzL,YAAYV,KAAK2N,UAAUpP,OACxD,MAAOkK,GACPzI,KAAK4G,gBAAgBxB,YAAYqD,EAAMzD,SAIzChF,KAAK0N,iBAEL1N,KAAKsO,aAAahB,QAMpBtB,EAAA9L,UAAAuD,YAAA,SAAYC,EAAeC,GAEzB,IACE3D,KAAKmM,wBAAwB1I,YAAYC,EAAOC,GAChD,MAAO8E,GACPzI,KAAK4G,gBAAgBxB,YAAYqD,EAAMzD,SAGzChF,KAAKuO,aAAajB,QAKpBtB,EAAA9L,UAAA2D,YAAA,SAAYC,GAEV,IACE9D,KAAKmM,wBAAwBtI,YAAYC,GACzC,MAAO2E,GACPzI,KAAK4G,gBAAgBxB,YAAYqD,EAAMzD,SAGzChF,KAAKwO,gBAAgBlB,QAKvBtB,EAAA9L,UAAAiE,YAAA,SAAYC,GAEV,IACEpE,KAAKmM,wBAAwBhI,YAAYC,GACzC,MAAOqE,GACPzI,KAAK4G,gBAAgBxB,YAAYqD,EAAMzD,SAGzChF,KAAKwO,gBAAgBlB,QASvBtB,EAAA9L,UAAAuO,YAAA,SAAYrD,GACV,OAAOA,EAAMsD,UAAY,IAAMtD,EAAMsD,UAAY,IAGnD1C,EAAA9L,UAAA0J,SAAA,WACE5J,KAAK+M,eACL/M,KAAKuN,iBACLvN,KAAK0N,kBAjOE3D,EAAAA,CAARC,EAAAA,8DACwCD,EAAAA,CAAxCG,EAAAA,UAAU,aAAc,CAACC,UAAQ,8DACSJ,EAAAA,CAA1CG,EAAAA,UAAU,eAAgB,CAACC,UAAQ,gEACOJ,EAAAA,CAA1CG,EAAAA,UAAU,eAAgB,CAACC,UAAQ,gEACUJ,EAAAA,CAA7CG,EAAAA,UAAU,kBAAmB,CAACC,UAAQ,mEACIJ,EAAAA,CAA1CG,EAAAA,UAAU,eAAgB,CAACC,UAAQ,gEAI1BJ,EAAAA,CAATE,EAAAA,yBAAkBhD,EAAAA,6CArCR+E,EAAyB9O,EAAA,CAPrCmN,EAAAA,UAAU,CACTC,SAAU,yBACVC,SAAA,2yhBAEAC,UAAW,CAACmE,EAAAA,w5VA0CwBA,EAAAA,cACFC,EAAAA,YACG7J,EACQjF,KA1ClCkM,mBCIb,SAAA6C,KAA+B,OAAlBA,EAAe3R,EAAA,CAP3B4R,EAAAA,SAAS,CACRC,QAAS,CAACC,EAAAA,aAAcC,EAAAA,YAAaC,EAAAA,oBAAqBC,EAAAA,cAAcC,WACxEC,aAAc,CAAC1I,EAAoBoE,EAAqBa,EAA2BI,GACnFsD,QAAS,CAAC3I,EAAoBwI,EAAAA,eAC9B3E,UAAW,CAAC1K,EAAwBiF,MAGzB8J","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","/**\n * enable or disable toolbar based on configuration\n *\n * @param value toolbar item\n * @param toolbar toolbar configuration object\n */\nexport function canEnableToolbarOptions(value: string, toolbar: any): boolean {\n\n    if (value) {\n\n        if (toolbar['length'] === 0) {\n            return true;\n        } else {\n\n            const found = toolbar.filter(array => {\n                return array.indexOf(value) !== -1;\n            });\n\n            return found.length ? true : false;\n        }\n    } else {\n        return false;\n    }\n}\n\n/**\n * set editor configuration\n *\n * @param value configuration via [config] property\n * @param ngxEditorConfig default editor configuration\n * @param input direct configuration inputs via directives\n */\nexport function getEditorConfiguration(value: any, ngxEditorConfig: any, input: any): any {\n\n    for (const i in ngxEditorConfig) {\n        if (i) {\n\n            if (input[i] !== undefined) {\n                value[i] = input[i];\n            }\n\n            if (!value.hasOwnProperty(i)) {\n                value[i] = ngxEditorConfig[i];\n            }\n        }\n    }\n\n    return value;\n}\n\n/**\n * return vertical if the element is the resizer property is set to basic\n *\n * @param resizer type of resizer, either basic or stack\n */\nexport function canResize(resizer: string): any {\n    if (resizer === 'basic') {\n        return 'vertical';\n    }\n    return false;\n}\n\n/**\n * save selection when the editor is focussed out\n */\nexport function saveSelection(): any {\n    if (window.getSelection) {\n        const sel = window.getSelection();\n        if (sel.getRangeAt && sel.rangeCount) {\n            return sel.getRangeAt(0);\n        }\n    } else if (document.getSelection && document.createRange) {\n        return document.createRange();\n    }\n    return null;\n}\n\n/**\n * restore selection when the editor is focussed in\n *\n * @param range saved selection when the editor is focussed out\n */\nexport function restoreSelection(range): boolean {\n    if (range) {\n        if (window.getSelection) {\n            const sel = window.getSelection();\n            sel.removeAllRanges();\n            sel.addRange(range);\n            return true;\n        } else if (document.getSelection && range.select) {\n            range.select();\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\n","import {Injectable} from '@angular/core';\nimport {HttpClient, HttpRequest, HttpHeaders} from '@angular/common/http';\nimport * as Utils from '../utils/ngx-editor.utils';\n\n@Injectable()\nexport class CommandExecutorService {\n\n  /** saves the selection from the editor when focussed out */\n  savedSelection: any = undefined;\n\n  /**\n   *\n   * @param _http HTTP Client for making http requests\n   */\n  constructor(private _http: HttpClient) {\n  }\n\n  /**\n   * executes command from the toolbar\n   *\n   * @param command command to be executed\n   */\n  execute(command: string): void {\n\n    if (!this.savedSelection && command !== 'enableObjectResizing') {\n      throw new Error('Range out of Editor');\n    }\n\n    if (command === 'enableObjectResizing') {\n      document.execCommand('enableObjectResizing', true, 'true');\n      return;\n    }\n\n    if (command === 'blockquote') {\n      document.execCommand('formatBlock', false, 'blockquote');\n      return;\n    }\n\n    if (command === 'removeBlockquote') {\n      document.execCommand('formatBlock', false, 'div');\n      return;\n    }\n\n    document.execCommand(command, false, null);\n    return;\n  }\n\n  /**\n   * inserts image in the editor\n   *\n   * @param imageURI url of the image to be inserted\n   */\n  insertImage(imageURI: string): void {\n    if (this.savedSelection) {\n      if (imageURI) {\n        const restored = Utils.restoreSelection(this.savedSelection);\n        if (restored) {\n          const inserted = document.execCommand('insertImage', false, imageURI);\n          if (!inserted) {\n            throw new Error('Invalid URL');\n          }\n        }\n      }\n    } else {\n      throw new Error('Range out of the editor');\n    }\n    return;\n  }\n\n  /**\n   * inserts image in the editor\n   *\n   * @param videParams url of the image to be inserted\n   */\n  insertVideo(videParams: any): void {\n    if (this.savedSelection) {\n      if (videParams) {\n        const restored = Utils.restoreSelection(this.savedSelection);\n        if (restored) {\n          if (this.isYoutubeLink(videParams.videoUrl)) {\n            const youtubeURL = '<iframe width=\"' + videParams.width + '\" height=\"' + videParams.height + '\"'\n              + 'src=\"' + videParams.videoUrl + '\"></iframe>';\n            this.insertHtml(youtubeURL);\n          } else if (this.checkTagSupportInBrowser('video')) {\n\n            if (this.isValidURL(videParams.videoUrl)) {\n              const videoSrc = '<video width=\"' + videParams.width + '\" height=\"' + videParams.height + '\"'\n                + ' controls=\"true\"><source src=\"' + videParams.videoUrl + '\"></video>';\n              this.insertHtml(videoSrc);\n            } else {\n              throw new Error('Invalid video URL');\n            }\n\n          } else {\n            throw new Error('Unable to insert video');\n          }\n        }\n      }\n    } else {\n      throw new Error('Range out of the editor');\n    }\n    return;\n  }\n\n  /**\n   * checks the input url is a valid youtube URL or not\n   *\n   * @param url Youtue URL\n   */\n  private isYoutubeLink(url: string): boolean {\n    const ytRegExp = /^(http(s)?:\\/\\/)?((w){3}.)?youtu(be|.be)?(\\.com)?\\/.+/;\n    return ytRegExp.test(url);\n  }\n\n  /**\n   * check whether the string is a valid url or not\n   * @param url url\n   */\n  private isValidURL(url: string) {\n    const urlRegExp = /(http|https):\\/\\/(\\w+:{0,1}\\w*)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%!\\-\\/]))?/;\n    return urlRegExp.test(url);\n  }\n\n  /**\n   * uploads image to the server\n   *\n   * @param file file that has to be uploaded\n   * @param endPoint enpoint to which the image has to be uploaded\n   */\n  uploadImage(file: File, endPoint: string, headers?: any): any {\n\n    if (!endPoint) {\n      throw new Error('Image Endpoint isn`t provided or invalid');\n    }\n\n    const formData: FormData = new FormData();\n\n    if (file) {\n\n      formData.append('file', file);\n\n      let requestHeader = new HttpHeaders();\n      const headerKeys = Object.keys(headers);\n      for (const headerKey of headerKeys) {\n        requestHeader = requestHeader.set(headerKey, headers[headerKey]);\n      }\n      const req = new HttpRequest('POST', endPoint, formData, {\n        reportProgress: true,\n        headers: requestHeader\n      });\n\n      return this._http.request(req);\n\n    } else {\n      throw new Error('Invalid Image');\n    }\n  }\n\n  /**\n   * inserts link in the editor\n   *\n   * @param params parameters that holds the information for the link\n   */\n  createLink(params: any): void {\n\n    if (this.savedSelection) {\n      /**\n       * check whether the saved selection contains a range or plain selection\n       */\n      if (params.urlNewTab) {\n        const newUrl = '<a href=\"' + params.urlLink + '\" target=\"_blank\">' + params.urlText + '</a>';\n\n        if (document.getSelection().type !== 'Range') {\n          const restored = Utils.restoreSelection(this.savedSelection);\n          if (restored) {\n            this.insertHtml(newUrl);\n          }\n        } else {\n          throw new Error('Only new links can be inserted. You cannot edit URL`s');\n        }\n      } else {\n        const restored = Utils.restoreSelection(this.savedSelection);\n        if (restored) {\n          document.execCommand('createLink', false, params.urlLink);\n        }\n      }\n    } else {\n      throw new Error('Range out of the editor');\n    }\n\n    return;\n  }\n\n  /**\n   * insert color either font or background\n   *\n   * @param color color to be inserted\n   * @param where where the color has to be inserted either text/background\n   */\n  insertColor(color: string, where: string): void {\n\n    if (this.savedSelection) {\n      const restored = Utils.restoreSelection(this.savedSelection);\n      if (restored && this.checkSelection()) {\n        if (where === 'textColor') {\n          document.execCommand('foreColor', false, color);\n        } else {\n          document.execCommand('hiliteColor', false, color);\n        }\n      }\n\n    } else {\n      throw new Error('Range out of the editor');\n    }\n\n    return;\n  }\n\n  /**\n   * set font size for text\n   *\n   * @param fontSize font-size to be set\n   */\n  setFontSize(fontSize: string): void {\n\n    if (this.savedSelection && this.checkSelection()) {\n      const deletedValue = this.deleteAndGetElement();\n\n      if (deletedValue) {\n\n        const restored = Utils.restoreSelection(this.savedSelection);\n\n        if (restored) {\n          if (this.isNumeric(fontSize)) {\n            const fontPx = '<span style=\"font-size: ' + fontSize + 'px;\">' + deletedValue + '</span>';\n            this.insertHtml(fontPx);\n          } else {\n            const fontPx = '<span style=\"font-size: ' + fontSize + ';\">' + deletedValue + '</span>';\n            this.insertHtml(fontPx);\n          }\n        }\n      }\n\n    } else {\n      throw new Error('Range out of the editor');\n    }\n  }\n\n  /**\n   * set font name/family for text\n   *\n   * @param fontName font-family to be set\n   */\n  setFontName(fontName: string): void {\n\n    if (this.savedSelection && this.checkSelection()) {\n      const deletedValue = this.deleteAndGetElement();\n\n      if (deletedValue) {\n\n        const restored = Utils.restoreSelection(this.savedSelection);\n\n        if (restored) {\n          if (this.isNumeric(fontName)) {\n            const fontFamily = '<span style=\"font-family: ' + fontName + 'px;\">' + deletedValue + '</span>';\n            this.insertHtml(fontFamily);\n          } else {\n            const fontFamily = '<span style=\"font-family: ' + fontName + ';\">' + deletedValue + '</span>';\n            this.insertHtml(fontFamily);\n          }\n        }\n      }\n\n    } else {\n      throw new Error('Range out of the editor');\n    }\n  }\n\n  /** insert HTML */\n  private insertHtml(html: string): void {\n\n    const isHTMLInserted = document.execCommand('insertHTML', false, html);\n\n    if (!isHTMLInserted) {\n      throw new Error('Unable to perform the operation');\n    }\n\n    return;\n  }\n\n  /**\n   * check whether the value is a number or string\n   * if number return true\n   * else return false\n   */\n  private isNumeric(value: any): boolean {\n    return /^-{0,1}\\d+$/.test(value);\n  }\n\n  /** delete the text at selected range and return the value */\n  private deleteAndGetElement(): any {\n\n    let slectedText;\n\n    if (this.savedSelection) {\n      slectedText = this.savedSelection.toString();\n      this.savedSelection.deleteContents();\n      return slectedText;\n    }\n\n    return false;\n\n  }\n\n  /** check any slection is made or not */\n  private checkSelection(): any {\n\n    const slectedText = this.savedSelection.toString();\n\n    if (slectedText.length === 0) {\n      throw new Error('No Selection Made');\n    }\n\n    return true;\n  }\n\n  /**\n   * check tag is supported by browser or not\n   *\n   * @param tag HTML tag\n   */\n  private checkTagSupportInBrowser(tag: string): boolean {\n    return !(document.createElement(tag) instanceof HTMLUnknownElement);\n  }\n\n}\n","import {Injectable} from '@angular/core';\n\nimport {Observable} from 'rxjs';\nimport {Subject} from 'rxjs';\n\n/** time in which the message has to be cleared */\nconst DURATION = 7000;\n\n@Injectable()\nexport class MessageService {\n\n  /** variable to hold the user message */\n  private message: Subject<string> = new Subject();\n\n  constructor() {\n  }\n\n  /** returns the message sent by the editor */\n  getMessage(): Observable<string> {\n    return this.message.asObservable();\n  }\n\n  /**\n   * sends message to the editor\n   *\n   * @param message message to be sent\n   */\n  sendMessage(message: string): void {\n    this.message.next(message);\n    this.clearMessageIn(DURATION);\n    return;\n  }\n\n  /**\n   * a short interval to clear message\n   *\n   * @param milliseconds time in seconds in which the message has to be cleared\n   */\n  private clearMessageIn(milliseconds: number): void {\n    setTimeout(() => {\n      this.message.next(undefined);\n    }, milliseconds);\n    return;\n  }\n\n}\n","/**\n * toolbar default configuration\n */\nexport const ngxEditorConfig = {\n  editable: true,\n  spellcheck: true,\n  height: 'auto',\n  minHeight: '0',\n  width: 'auto',\n  minWidth: '0',\n  translate: 'yes',\n  enableToolbar: true,\n  showToolbar: true,\n  placeholder: 'Enter text here...',\n  imageEndPoint: '',\n  toolbar: [\n    ['bold', 'italic', 'underline', 'strikeThrough', 'superscript', 'subscript'],\n    ['fontName', 'fontSize', 'color'],\n    ['justifyLeft', 'justifyCenter', 'justifyRight', 'justifyFull', 'indent', 'outdent'],\n    ['cut', 'copy', 'delete', 'removeFormat', 'undo', 'redo'],\n    ['paragraph', 'blockquote', 'removeBlockquote', 'horizontalLine', 'orderedList', 'unorderedList'],\n    ['link', 'unlink', 'image', 'video'],\n    ['code']\n  ],\n  headers: {},\n  responseEndPoint: null,\n  appendImageEndPointToResponse: true\n};\n\n/**\n * codemirror configuaration\n */\nexport const codeMirrorConfig = {\n  lineNumbers: true,\n  gutter: true,\n  lineWrapping: true,\n  mode: 'htmlmixed',\n  autofocus: true,\n  htmlMode: true\n};\n","import {\n  Component, OnInit, Input, Output, ViewChild,\n  EventEmitter, Renderer2, forwardRef\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport * as CodeMirror from 'codemirror';\nimport 'codemirror/addon/display/placeholder.js';\nimport 'codemirror/mode/htmlmixed/htmlmixed.js';\n\nimport {CommandExecutorService} from './common/services/command-executor.service';\nimport {MessageService} from './common/services/message.service';\n\nimport {ngxEditorConfig, codeMirrorConfig} from './common/ngx-editor.defaults';\nimport * as Utils from './common/utils/ngx-editor.utils';\n\n@Component({\n  selector: 'app-ngx-editor',\n  templateUrl: './ngx-editor.component.html',\n  styleUrls: ['./ngx-editor.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NgxEditorComponent),\n      multi: true\n    }\n  ]\n})\n\nexport class NgxEditorComponent implements OnInit, ControlValueAccessor {\n\n  /** Specifies weather the textarea to be editable or not */\n  @Input() editable: boolean;\n  /** The spellcheck property specifies whether the element is to have its spelling and grammar checked or not. */\n  @Input() spellcheck: boolean;\n  /** Placeholder for the textArea */\n  @Input() placeholder: string;\n  /**\n   * The translate property specifies whether the content of an element should be translated or not.\n   *\n   * Check https://www.w3schools.com/tags/att_global_translate.asp for more information and browser support\n   */\n  @Input() translate: string;\n  /** Sets height of the editor */\n  @Input() height: string;\n  /** Sets minimum height for the editor */\n  @Input() minHeight: string;\n  /** Sets Width of the editor */\n  @Input() width: string;\n  /** Sets minimum width of the editor */\n  @Input() minWidth: string;\n  /**\n   * Toolbar accepts an array which specifies the options to be enabled for the toolbar\n   *\n   * Check ngxEditorConfig for toolbar configuration\n   *\n   * Passing an empty array will enable all toolbar\n   */\n  @Input() toolbar: Object;\n  /**\n   * The editor can be resized vertically.\n   *\n   * `basic` resizer enables the html5 reszier. Check here https://www.w3schools.com/cssref/css3_pr_resize.asp\n   *\n   * `stack` resizer enable a resizer that looks like as if in https://stackoverflow.com\n   */\n  @Input() resizer = 'stack';\n  /**\n   * The config property is a JSON object\n   *\n   * All avaibale inputs inputs can be provided in the configuration as JSON\n   * inputs provided directly are considered as top priority\n   */\n  @Input() config = ngxEditorConfig;\n  /** Weather to show or hide toolbar */\n  @Input() showToolbar: boolean;\n  /** Weather to enable or disable the toolbar */\n  @Input() enableToolbar: boolean;\n  /** Endpoint for which the image to be uploaded */\n  @Input() imageEndPoint: string;\n\n  /** emits `blur` event when focused out from the textarea */\n  @Output() blur: EventEmitter<string> = new EventEmitter<string>();\n  /** emits `focus` event when focused in to the textarea */\n  @Output() focus: EventEmitter<string> = new EventEmitter<string>();\n\n  @ViewChild('ngxTextArea', {static: true}) textArea: any;\n  @ViewChild('ngxCodeEditor', {static: true}) codeEditor: any;\n  @ViewChild('ngxWrapper', {static: true}) ngxWrapper: any;\n\n  Utils: any = Utils;\n  codeEditorMode = false;\n\n  private ngxCodeMirror: any = undefined;\n  private onChange: (value: string) => void;\n  private onTouched: () => void;\n\n  /**\n   * @param _messageService service to send message to the editor message component\n   * @param _commandExecutor executes command from the toolbar\n   * @param _renderer access and manipulate the dom element\n   */\n  constructor(\n    private _messageService: MessageService,\n    private _commandExecutor: CommandExecutorService,\n    private _renderer: Renderer2) {\n  }\n\n  /**\n   * events\n   */\n  onTextAreaFocus(): void {\n    this.focus.emit('focus');\n    return;\n  }\n\n  /** focus the text area when the editor is focussed */\n  onEditorFocus() {\n    this.textArea.nativeElement.focus();\n  }\n\n  /**\n   * Executed from the contenteditable section while the input property changes\n   * @param html html string from contenteditable\n   */\n  onContentChange(html: string): void {\n\n    if (typeof this.onChange === 'function') {\n      this.onChange(html);\n      this.togglePlaceholder(html);\n    }\n\n    return;\n  }\n\n  onTextAreaBlur(): void {\n\n    /** save selection if focussed out */\n    this._commandExecutor.savedSelection = Utils.saveSelection();\n\n    if (typeof this.onTouched === 'function') {\n      this.onTouched();\n    }\n    this.blur.emit('blur');\n    return;\n  }\n\n  /**\n   * resizing text area\n   *\n   * @param offsetY vertical height of the eidtable portion of the editor\n   */\n  resizeTextArea(offsetY: number): void {\n    let newHeight = parseInt(this.height, 10);\n    newHeight += offsetY;\n    this.height = newHeight + 'px';\n    this.textArea.nativeElement.style.height = this.height;\n\n    /**\n     * update code-editor height only on editor mode\n     */\n    if (this.codeEditorMode) {\n      this.ngxCodeMirror.setSize('100%', this.height);\n    }\n    return;\n  }\n\n  /**\n   * editor actions, i.e., executes command from toolbar\n   *\n   * @param commandName name of the command to be executed\n   */\n  executeCommand(commandName: string): void {\n\n    if (commandName === 'code') {\n      this.toggleCodeEditor();\n      return;\n    }\n\n    try {\n      this._commandExecutor.execute(commandName);\n    } catch (error) {\n      this._messageService.sendMessage(error.message);\n    }\n\n    return;\n  }\n\n  /**\n   * Write a new value to the element.\n   *\n   * @param value value to be executed when there is a change in contenteditable\n   */\n  writeValue(value: any): void {\n\n    this.togglePlaceholder(value);\n\n    if (value === null || value === undefined || value === '' || value === '<br>') {\n      value = null;\n    }\n\n    this.refreshView(value);\n  }\n\n  /**\n   * Set the function to be called\n   * when the control receives a change event.\n   *\n   * @param fn a function\n   */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /**\n   * Set the function to be called\n   * when the control receives a touch event.\n   *\n   * @param fn a function\n   */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /**\n   * refresh view/HTML of the editor\n   *\n   * @param value html string from the editor\n   */\n  refreshView(value: string): void {\n    const normalizedValue = value === null ? '' : value;\n    this._renderer.setProperty(this.textArea.nativeElement, 'innerHTML', normalizedValue);\n    return;\n  }\n\n  /**\n   * toggle between codeview and editor\n   */\n  toggleCodeEditor(): void {\n    this.codeEditorMode = !this.codeEditorMode;\n\n    if (this.codeEditorMode) {\n\n      this.ngxCodeMirror = CodeMirror.fromTextArea(this.codeEditor.nativeElement, codeMirrorConfig);\n\n      /** set value of the code editor */\n      this.ngxCodeMirror.setValue(this.textArea.nativeElement.innerHTML);\n\n      /** sets height of the code editor as same as the height of the textArea */\n      this.ngxCodeMirror.setSize('100%', this.height);\n\n    } else {\n\n      /** remove/ destroy code editor */\n      this.ngxCodeMirror.toTextArea();\n\n      /** update the model value and html content on the contenteditable */\n      this.refreshView(this.ngxCodeMirror.getValue());\n      this.onContentChange(this.ngxCodeMirror.getValue());\n\n    }\n    return;\n  }\n\n  /**\n   * toggles placeholder based on input string\n   *\n   * @param value A HTML string from the editor\n   */\n  togglePlaceholder(value: any): void {\n    if (!value || value === '<br>' || value === '') {\n      this._renderer.addClass(this.ngxWrapper.nativeElement, 'show-placeholder');\n    } else {\n      this._renderer.removeClass(this.ngxWrapper.nativeElement, 'show-placeholder');\n    }\n    return;\n  }\n\n  /**\n   * returns a json containing input params\n   */\n  getCollectiveParams(): any {\n    return {\n      editable: this.editable,\n      spellcheck: this.spellcheck,\n      placeholder: this.placeholder,\n      translate: this.translate,\n      height: this.height,\n      minHeight: this.minHeight,\n      width: this.width,\n      minWidth: this.minWidth,\n      enableToolbar: this.enableToolbar,\n      showToolbar: this.showToolbar,\n      imageEndPoint: this.imageEndPoint,\n      toolbar: this.toolbar\n    };\n  }\n\n  ngOnInit() {\n    /**\n     * set configuartion\n     */\n    this.config = this.Utils.getEditorConfiguration(this.config, ngxEditorConfig, this.getCollectiveParams());\n\n    this.height = this.height || this.textArea.nativeElement.offsetHeight;\n\n    this.executeCommand('enableObjectResizing');\n\n  }\n\n}\n","import { Component, HostListener } from '@angular/core';\nimport { NgxEditorComponent } from '../ngx-editor.component';\n\n@Component({\n  selector: 'app-ngx-grippie',\n  templateUrl: './ngx-grippie.component.html',\n  styleUrls: ['./ngx-grippie.component.scss']\n})\n\nexport class NgxGrippieComponent {\n\n  /** height of the editor */\n  height: number;\n  /** previous value befor resizing the editor */\n  oldY = 0;\n  /** set to true on mousedown event */\n  grabber = false;\n\n  /**\n   * Constructor\n   *\n   * @param _editorComponent Editor component\n   */\n  constructor(private _editorComponent: NgxEditorComponent) { }\n\n  /**\n   *\n   * @param event Mouseevent\n   *\n   * Update the height of the editor when the grabber is dragged\n   */\n  @HostListener('document:mousemove', ['$event']) onMouseMove(event: MouseEvent) {\n\n    if (!this.grabber) {\n      return;\n    }\n\n    this._editorComponent.resizeTextArea(event.clientY - this.oldY);\n    this.oldY = event.clientY;\n  }\n\n  /**\n   *\n   * @param event Mouseevent\n   *\n   * set the grabber to false on mouse up action\n   */\n  @HostListener('document:mouseup', ['$event']) onMouseUp(event: MouseEvent) {\n    this.grabber = false;\n  }\n\n  @HostListener('mousedown', ['$event']) onResize(event: MouseEvent, resizer?: Function) {\n    this.grabber = true;\n    this.oldY = event.clientY;\n    event.preventDefault();\n  }\n\n}\n","import { Component } from '@angular/core';\n\nimport { MessageService } from '../common/services/message.service';\n\n@Component({\n  selector: 'app-ngx-editor-message',\n  templateUrl: './ngx-editor-message.component.html',\n  styleUrls: ['./ngx-editor-message.component.scss']\n})\n\nexport class NgxEditorMessageComponent {\n\n  /** property that holds the message to be displayed on the editor */\n  ngxMessage = undefined;\n\n  /**\n   * @param _messageService service to send message to the editor\n   */\n  constructor(private _messageService: MessageService) {\n    this._messageService.getMessage().subscribe((message: string) => this.ngxMessage = message);\n  }\n\n  /**\n   * clears editor message\n   */\n  clearMessage(): void {\n    this.ngxMessage = undefined;\n    return;\n  }\n}\n","import {Component, Input, Output, EventEmitter, OnInit, ViewChild} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport {HttpResponse} from '@angular/common/http';\nimport {PopoverConfig} from 'ngx-bootstrap';\nimport {CommandExecutorService} from '../common/services/command-executor.service';\nimport {MessageService} from '../common/services/message.service';\nimport * as Utils from '../common/utils/ngx-editor.utils';\n\n@Component({\n  selector: 'app-ngx-editor-toolbar',\n  templateUrl: './ngx-editor-toolbar.component.html',\n  styleUrls: ['./ngx-editor-toolbar.component.scss'],\n  providers: [PopoverConfig]\n})\n\nexport class NgxEditorToolbarComponent implements OnInit {\n\n  /** holds values of the insert link form */\n  urlForm: FormGroup;\n  /** holds values of the insert image form */\n  imageForm: FormGroup;\n  /** holds values of the insert video form */\n  videoForm: FormGroup;\n  /** set to false when image is being uploaded */\n  uploadComplete = true;\n  /** upload percentage */\n  updloadPercentage = 0;\n  /** set to true when the image is being uploaded */\n  isUploading = false;\n  /** which tab to active for color insetion */\n  selectedColorTab = 'textColor';\n  /** font family name */\n  fontName = '';\n  /** font size */\n  fontSize = '';\n  /** hex color code */\n  hexColor = '';\n  /** show/hide image uploader */\n  isImageUploader = false;\n\n  /**\n   * Editor configuration\n   */\n  @Input() config: any;\n  @ViewChild('urlPopover', {static: true}) urlPopover;\n  @ViewChild('imagePopover', {static: true}) imagePopover;\n  @ViewChild('videoPopover', {static: true}) videoPopover;\n  @ViewChild('fontSizePopover', {static: true}) fontSizePopover;\n  @ViewChild('colorPopover', {static: true}) colorPopover;\n  /**\n   * Emits an event when a toolbar button is clicked\n   */\n  @Output() execute: EventEmitter<string> = new EventEmitter<string>();\n\n  constructor(private _popOverConfig: PopoverConfig,\n              private _formBuilder: FormBuilder,\n              private _messageService: MessageService,\n              private _commandExecutorService: CommandExecutorService) {\n    this._popOverConfig.outsideClick = true;\n    this._popOverConfig.placement = 'bottom';\n    this._popOverConfig.container = 'body';\n  }\n\n  /**\n   * enable or diable toolbar based on configuration\n   *\n   * @param value name of the toolbar buttons\n   */\n  canEnableToolbarOptions(value): boolean {\n    return Utils.canEnableToolbarOptions(value, this.config['toolbar']);\n  }\n\n  /**\n   * triggers command from the toolbar to be executed and emits an event\n   *\n   * @param command name of the command to be executed\n   */\n  triggerCommand(command: string): void {\n    this.execute.emit(command);\n  }\n\n  /**\n   * create URL insert form\n   */\n  buildUrlForm(): void {\n\n    this.urlForm = this._formBuilder.group({\n      urlLink: ['', [Validators.required]],\n      urlText: ['', [Validators.required]],\n      urlNewTab: [true]\n    });\n\n    return;\n  }\n\n  /**\n   * inserts link in the editor\n   */\n  insertLink(): void {\n\n    try {\n      this._commandExecutorService.createLink(this.urlForm.value);\n    } catch (error) {\n      this._messageService.sendMessage(error.message);\n    }\n\n    /** reset form to default */\n    this.buildUrlForm();\n    /** close inset URL pop up */\n    this.urlPopover.hide();\n\n    return;\n  }\n\n  /**\n   * create insert image form\n   */\n  buildImageForm(): void {\n\n    this.imageForm = this._formBuilder.group({\n      imageUrl: ['', [Validators.required]]\n    });\n\n    return;\n  }\n\n  /**\n   * create insert image form\n   */\n  buildVideoForm(): void {\n\n    this.videoForm = this._formBuilder.group({\n      videoUrl: ['', [Validators.required]],\n      height: [''],\n      width: ['']\n    });\n\n    return;\n  }\n\n  /**\n   * Executed when file is selected\n   *\n   * @param e onChange event\n   */\n  onFileChange(e): void {\n\n    this.uploadComplete = false;\n    this.isUploading = true;\n\n    if (e.target.files.length > 0) {\n      const file = e.target.files[0];\n\n      try {\n        this._commandExecutorService.uploadImage(file, this.config.imageEndPoint, this.config.headers).subscribe(event => {\n\n          if (event.type) {\n            this.updloadPercentage = Math.round(100 * event.loaded / event.total);\n          }\n\n          if (event instanceof HttpResponse) {\n            try {\n              if (this.config.responseEndPoint) {\n                this._commandExecutorService.insertImage(this.config.responseEndPoint + event.body.url);\n              } else {\n                this._commandExecutorService.insertImage(event.body.url);\n              }\n            } catch (error) {\n              this._messageService.sendMessage(error.message);\n            }\n            this.uploadComplete = true;\n            this.isUploading = false;\n          }\n        });\n      } catch (error) {\n        this._messageService.sendMessage(error.message);\n        this.uploadComplete = true;\n        this.isUploading = false;\n      }\n\n    }\n\n    return;\n  }\n\n  /** insert image in the editor */\n  insertImage(): void {\n    try {\n      this._commandExecutorService.insertImage(this.imageForm.value.imageUrl);\n    } catch (error) {\n      this._messageService.sendMessage(error.message);\n    }\n\n    /** reset form to default */\n    this.buildImageForm();\n    /** close inset URL pop up */\n    this.imagePopover.hide();\n\n    return;\n  }\n\n  /** insert image in the editor */\n  insertVideo(): void {\n    try {\n      this._commandExecutorService.insertVideo(this.videoForm.value);\n    } catch (error) {\n      this._messageService.sendMessage(error.message);\n    }\n\n    /** reset form to default */\n    this.buildVideoForm();\n    /** close inset URL pop up */\n    this.videoPopover.hide();\n\n    return;\n  }\n\n  /** inser text/background color */\n  insertColor(color: string, where: string): void {\n\n    try {\n      this._commandExecutorService.insertColor(color, where);\n    } catch (error) {\n      this._messageService.sendMessage(error.message);\n    }\n\n    this.colorPopover.hide();\n    return;\n  }\n\n  /** set font size */\n  setFontSize(fontSize: string): void {\n\n    try {\n      this._commandExecutorService.setFontSize(fontSize);\n    } catch (error) {\n      this._messageService.sendMessage(error.message);\n    }\n\n    this.fontSizePopover.hide();\n    return;\n  }\n\n  /** set font Name/family */\n  setFontName(fontName: string): void {\n\n    try {\n      this._commandExecutorService.setFontName(fontName);\n    } catch (error) {\n      this._messageService.sendMessage(error.message);\n    }\n\n    this.fontSizePopover.hide();\n    return;\n  }\n\n  /**\n   * allow only numbers\n   *\n   * @param event keypress event\n   */\n  onlyNumbers(event: KeyboardEvent): boolean {\n    return event.charCode >= 48 && event.charCode <= 57;\n  }\n\n  ngOnInit() {\n    this.buildUrlForm();\n    this.buildImageForm();\n    this.buildVideoForm();\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { PopoverModule } from 'ngx-bootstrap';\nimport { NgxEditorComponent } from './ngx-editor.component';\nimport { NgxGrippieComponent } from './ngx-grippie/ngx-grippie.component';\nimport { NgxEditorMessageComponent } from './ngx-editor-message/ngx-editor-message.component';\nimport { NgxEditorToolbarComponent } from './ngx-editor-toolbar/ngx-editor-toolbar.component';\nimport { MessageService } from './common/services/message.service';\nimport { CommandExecutorService } from './common/services/command-executor.service';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, ReactiveFormsModule, PopoverModule.forRoot()],\n  declarations: [NgxEditorComponent, NgxGrippieComponent, NgxEditorMessageComponent, NgxEditorToolbarComponent],\n  exports: [NgxEditorComponent, PopoverModule],\n  providers: [CommandExecutorService, MessageService]\n})\n\nexport class NgxEditorModule { }\n"]}