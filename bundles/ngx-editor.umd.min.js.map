{
  "version": 3,
  "file": "ngx-editor.umd.min.js",
  "sources": [
    "ng://ngx-editor/out/app/ngx-editor/common/utils/ngx-editor.utils.ts",
    "ng://ngx-editor/out/app/ngx-editor/common/services/command-executor.service.ts",
    "ng://ngx-editor/node_modules/tslib/tslib.es6.js",
    "ng://ngx-editor/out/app/ngx-editor/common/services/message.service.ts",
    "ng://ngx-editor/out/app/ngx-editor/common/ngx-editor.defaults.ts",
    "ng://ngx-editor/out/app/ngx-editor/ngx-editor.component.ts",
    "ng://ngx-editor/out/app/ngx-editor/ngx-grippie/ngx-grippie.component.ts",
    "ng://ngx-editor/out/app/ngx-editor/ngx-editor-message/ngx-editor-message.component.ts",
    "ng://ngx-editor/out/app/ngx-editor/ngx-editor-toolbar/ngx-editor-toolbar.component.ts",
    "ng://ngx-editor/out/app/ngx-editor/ngx-editor.module.ts"
  ],
  "sourcesContent": [
    "/**\n * enable or disable toolbar based on configuration\n *\n * @param value toolbar item\n * @param toolbar toolbar configuration object\n */\nexport function canEnableToolbarOptions(value: string, toolbar: any): boolean {\n\n    if (value) {\n\n        if (toolbar['length'] === 0) {\n            return true;\n        } else {\n\n            const found = toolbar.filter(array => {\n                return array.indexOf(value) !== -1;\n            });\n\n            return found.length ? true : false;\n        }\n    } else {\n        return false;\n    }\n}\n\n/**\n * set editor configuration\n *\n * @param value configuration via [config] property\n * @param ngxEditorConfig default editor configuration\n * @param input direct configuration inputs via directives\n */\nexport function getEditorConfiguration(value: any, ngxEditorConfig: any, input: any): any {\n\n    for (const i in ngxEditorConfig) {\n        if (i) {\n\n            if (input[i] !== undefined) {\n                value[i] = input[i];\n            }\n\n            if (!value.hasOwnProperty(i)) {\n                value[i] = ngxEditorConfig[i];\n            }\n        }\n    }\n\n    return value;\n}\n\n/**\n * return vertical if the element is the resizer property is set to basic\n *\n * @param resizer type of resizer, either basic or stack\n */\nexport function canResize(resizer: string): any {\n    if (resizer === 'basic') {\n        return 'vertical';\n    }\n    return false;\n}\n\n/**\n * save selection when the editor is focussed out\n */\nexport function saveSelection(): any {\n    if (window.getSelection) {\n        const sel = window.getSelection();\n        if (sel.getRangeAt && sel.rangeCount) {\n            return sel.getRangeAt(0);\n        }\n    } else if (document.getSelection && document.createRange) {\n        return document.createRange();\n    }\n    return null;\n}\n\n/**\n * restore selection when the editor is focussed in\n *\n * @param range saved selection when the editor is focussed out\n */\nexport function restoreSelection(range): boolean {\n    if (range) {\n        if (window.getSelection) {\n            const sel = window.getSelection();\n            sel.removeAllRanges();\n            sel.addRange(range);\n            return true;\n        } else if (document.getSelection && range.select) {\n            range.select();\n            return true;\n        }\n    } else {\n        return false;\n    }\n}\n\n",
    "import {Injectable} from '@angular/core';\nimport {HttpClient, HttpRequest, HttpHeaders} from '@angular/common/http';\nimport * as Utils from '../utils/ngx-editor.utils';\n\n@Injectable()\nexport class CommandExecutorService {\n\n  /** saves the selection from the editor when focussed out */\n  savedSelection: any = undefined;\n\n  /**\n   *\n   * @param _http HTTP Client for making http requests\n   */\n  constructor(private _http: HttpClient) {\n  }\n\n  /**\n   * executes command from the toolbar\n   *\n   * @param command command to be executed\n   */\n  execute(command: string): void {\n\n    if (!this.savedSelection && command !== 'enableObjectResizing') {\n      throw new Error('Range out of Editor');\n    }\n\n    if (command === 'enableObjectResizing') {\n      document.execCommand('enableObjectResizing', true, true);\n      return;\n    }\n\n    if (command === 'blockquote') {\n      document.execCommand('formatBlock', false, 'blockquote');\n      return;\n    }\n\n    if (command === 'removeBlockquote') {\n      document.execCommand('formatBlock', false, 'div');\n      return;\n    }\n\n    document.execCommand(command, false, null);\n    return;\n  }\n\n  /**\n   * inserts image in the editor\n   *\n   * @param imageURI url of the image to be inserted\n   */\n  insertImage(imageURI: string): void {\n    if (this.savedSelection) {\n      console.log('image uri is');\n      console.log(imageURI);\n      if (imageURI) {\n        const restored = Utils.restoreSelection(this.savedSelection);\n        if (restored) {\n          const inserted = document.execCommand('insertImage', false, imageURI);\n          if (!inserted) {\n            throw new Error('Invalid URL');\n          }\n        }\n      }\n    } else {\n      throw new Error('Range out of the editor');\n    }\n    return;\n  }\n\n  /**\n   * inserts image in the editor\n   *\n   * @param videParams url of the image to be inserted\n   */\n  insertVideo(videParams: any): void {\n    if (this.savedSelection) {\n      if (videParams) {\n        const restored = Utils.restoreSelection(this.savedSelection);\n        if (restored) {\n          if (this.isYoutubeLink(videParams.videoUrl)) {\n            const youtubeURL = '<iframe width=\"' + videParams.width + '\" height=\"' + videParams.height + '\"'\n              + 'src=\"' + videParams.videoUrl + '\"></iframe>';\n            this.insertHtml(youtubeURL);\n          } else if (this.checkTagSupportInBrowser('video')) {\n\n            if (this.isValidURL(videParams.videoUrl)) {\n              const videoSrc = '<video width=\"' + videParams.width + '\" height=\"' + videParams.height + '\"'\n                + ' controls=\"true\"><source src=\"' + videParams.videoUrl + '\"></video>';\n              this.insertHtml(videoSrc);\n            } else {\n              throw new Error('Invalid video URL');\n            }\n\n          } else {\n            throw new Error('Unable to insert video');\n          }\n        }\n      }\n    } else {\n      throw new Error('Range out of the editor');\n    }\n    return;\n  }\n\n  /**\n   * checks the input url is a valid youtube URL or not\n   *\n   * @param url Youtue URL\n   */\n  private isYoutubeLink(url: string): boolean {\n    const ytRegExp = /^(http(s)?:\\/\\/)?((w){3}.)?youtu(be|.be)?(\\.com)?\\/.+/;\n    return ytRegExp.test(url);\n  }\n\n  /**\n   * check whether the string is a valid url or not\n   * @param url url\n   */\n  private isValidURL(url: string) {\n    const urlRegExp = /(http|https):\\/\\/(\\w+:{0,1}\\w*)?(\\S+)(:[0-9]+)?(\\/|\\/([\\w#!:.?+=&%!\\-\\/]))?/;\n    return urlRegExp.test(url);\n  }\n\n  /**\n   * uploads image to the server\n   *\n   * @param file file that has to be uploaded\n   * @param endPoint enpoint to which the image has to be uploaded\n   */\n  uploadImage(file: File, endPoint: string, headers?: any): any {\n\n    if (!endPoint) {\n      throw new Error('Image Endpoint isn`t provided or invalid');\n    }\n\n    const formData: FormData = new FormData();\n\n    if (file) {\n\n      formData.append('file', file);\n\n      let requestHeader = new HttpHeaders();\n      const headerKeys = Object.keys(headers);\n      for (const headerKey of headerKeys) {\n        requestHeader = requestHeader.set(headerKey, headers[headerKey]);\n      }\n      const req = new HttpRequest('POST', endPoint, formData, {\n        reportProgress: true,\n        headers: requestHeader\n      });\n\n      return this._http.request(req);\n\n    } else {\n      throw new Error('Invalid Image');\n    }\n  }\n\n  /**\n   * inserts link in the editor\n   *\n   * @param params parameters that holds the information for the link\n   */\n  createLink(params: any): void {\n\n    if (this.savedSelection) {\n      /**\n       * check whether the saved selection contains a range or plain selection\n       */\n      if (params.urlNewTab) {\n        const newUrl = '<a href=\"' + params.urlLink + '\" target=\"_blank\">' + params.urlText + '</a>';\n\n        if (document.getSelection().type !== 'Range') {\n          const restored = Utils.restoreSelection(this.savedSelection);\n          if (restored) {\n            this.insertHtml(newUrl);\n          }\n        } else {\n          throw new Error('Only new links can be inserted. You cannot edit URL`s');\n        }\n      } else {\n        const restored = Utils.restoreSelection(this.savedSelection);\n        if (restored) {\n          document.execCommand('createLink', false, params.urlLink);\n        }\n      }\n    } else {\n      throw new Error('Range out of the editor');\n    }\n\n    return;\n  }\n\n  /**\n   * insert color either font or background\n   *\n   * @param color color to be inserted\n   * @param where where the color has to be inserted either text/background\n   */\n  insertColor(color: string, where: string): void {\n\n    if (this.savedSelection) {\n      const restored = Utils.restoreSelection(this.savedSelection);\n      if (restored && this.checkSelection()) {\n        if (where === 'textColor') {\n          document.execCommand('foreColor', false, color);\n        } else {\n          document.execCommand('hiliteColor', false, color);\n        }\n      }\n\n    } else {\n      throw new Error('Range out of the editor');\n    }\n\n    return;\n  }\n\n  /**\n   * set font size for text\n   *\n   * @param fontSize font-size to be set\n   */\n  setFontSize(fontSize: string): void {\n\n    if (this.savedSelection && this.checkSelection()) {\n      const deletedValue = this.deleteAndGetElement();\n\n      if (deletedValue) {\n\n        const restored = Utils.restoreSelection(this.savedSelection);\n\n        if (restored) {\n          if (this.isNumeric(fontSize)) {\n            const fontPx = '<span style=\"font-size: ' + fontSize + 'px;\">' + deletedValue + '</span>';\n            this.insertHtml(fontPx);\n          } else {\n            const fontPx = '<span style=\"font-size: ' + fontSize + ';\">' + deletedValue + '</span>';\n            this.insertHtml(fontPx);\n          }\n        }\n      }\n\n    } else {\n      throw new Error('Range out of the editor');\n    }\n  }\n\n  /**\n   * set font name/family for text\n   *\n   * @param fontName font-family to be set\n   */\n  setFontName(fontName: string): void {\n\n    if (this.savedSelection && this.checkSelection()) {\n      const deletedValue = this.deleteAndGetElement();\n\n      if (deletedValue) {\n\n        const restored = Utils.restoreSelection(this.savedSelection);\n\n        if (restored) {\n          if (this.isNumeric(fontName)) {\n            const fontFamily = '<span style=\"font-family: ' + fontName + 'px;\">' + deletedValue + '</span>';\n            this.insertHtml(fontFamily);\n          } else {\n            const fontFamily = '<span style=\"font-family: ' + fontName + ';\">' + deletedValue + '</span>';\n            this.insertHtml(fontFamily);\n          }\n        }\n      }\n\n    } else {\n      throw new Error('Range out of the editor');\n    }\n  }\n\n  /** insert HTML */\n  private insertHtml(html: string): void {\n\n    const isHTMLInserted = document.execCommand('insertHTML', false, html);\n\n    if (!isHTMLInserted) {\n      throw new Error('Unable to perform the operation');\n    }\n\n    return;\n  }\n\n  /**\n   * check whether the value is a number or string\n   * if number return true\n   * else return false\n   */\n  private isNumeric(value: any): boolean {\n    return /^-{0,1}\\d+$/.test(value);\n  }\n\n  /** delete the text at selected range and return the value */\n  private deleteAndGetElement(): any {\n\n    let slectedText;\n\n    if (this.savedSelection) {\n      slectedText = this.savedSelection.toString();\n      this.savedSelection.deleteContents();\n      return slectedText;\n    }\n\n    return false;\n\n  }\n\n  /** check any slection is made or not */\n  private checkSelection(): any {\n\n    const slectedText = this.savedSelection.toString();\n\n    if (slectedText.length === 0) {\n      throw new Error('No Selection Made');\n    }\n\n    return true;\n  }\n\n  /**\n   * check tag is supported by browser or not\n   *\n   * @param tag HTML tag\n   */\n  private checkTagSupportInBrowser(tag: string): boolean {\n    return !(document.createElement(tag) instanceof HTMLUnknownElement);\n  }\n\n}\n",
    "/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = Object.setPrototypeOf ||\r\n    ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n    function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = Object.assign || function __assign(t) {\r\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n        s = arguments[i];\r\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n    }\r\n    return t;\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = y[op[0] & 2 ? \"return\" : op[0] ? \"throw\" : \"next\"]) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [0, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r);  }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { if (o[n]) i[n] = function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; }; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator];\r\n    return m ? m.call(o) : typeof __values === \"function\" ? __values(o) : o[Symbol.iterator]();\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n",
    "import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs/Subject';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/operator/map';\n\n/** time in which the message has to be cleared */\nconst DURATION = 7000;\n\n@Injectable()\nexport class MessageService {\n\n  /** variable to hold the user message */\n  private message: Subject<string> = new Subject();\n\n  constructor() { }\n\n  /** returns the message sent by the editor */\n  getMessage(): Observable<string> {\n    return this.message.asObservable();\n  }\n\n  /**\n   * sends message to the editor\n   *\n   * @param message message to be sent\n   */\n  sendMessage(message: string): void {\n    this.message.next(message);\n    this.clearMessageIn(DURATION);\n    return;\n  }\n\n  /**\n   * a short interval to clear message\n   *\n   * @param milliseconds time in seconds in which the message has to be cleared\n   */\n  private clearMessageIn(milliseconds: number): void {\n    setTimeout(() => {\n      this.message.next(undefined);\n    }, milliseconds);\n    return;\n  }\n\n}\n",
    "/**\n * toolbar default configuration\n */\nexport const ngxEditorConfig = {\n  editable: true,\n  spellcheck: true,\n  height: 'auto',\n  minHeight: '0',\n  width: 'auto',\n  minWidth: '0',\n  translate: 'yes',\n  enableToolbar: true,\n  showToolbar: true,\n  placeholder: 'Enter text here...',\n  imageEndPoint: '',\n  toolbar: [\n    ['bold', 'italic', 'underline', 'strikeThrough', 'superscript', 'subscript'],\n    ['fontName', 'fontSize', 'color'],\n    ['justifyLeft', 'justifyCenter', 'justifyRight', 'justifyFull', 'indent', 'outdent'],\n    ['cut', 'copy', 'delete', 'removeFormat', 'undo', 'redo'],\n    ['paragraph', 'blockquote', 'removeBlockquote', 'horizontalLine', 'orderedList', 'unorderedList'],\n    ['link', 'unlink', 'image', 'video'],\n    ['code']\n  ],\n  headers: {},\n  responseEndPoint: null,\n  appendImageEndPointToResponse: true\n};\n\n/**\n * codemirror configuaration\n */\nexport const codeMirrorConfig = {\n  lineNumbers: true,\n  gutter: true,\n  lineWrapping: true,\n  mode: 'htmlmixed',\n  autofocus: true,\n  htmlMode: true\n};\n",
    "import {\n  Component, OnInit, Input, Output, ViewChild,\n  EventEmitter, Renderer2, forwardRef\n} from '@angular/core';\nimport {NG_VALUE_ACCESSOR, ControlValueAccessor} from '@angular/forms';\nimport * as CodeMirror from 'codemirror';\nimport 'codemirror/addon/display/placeholder.js';\nimport 'codemirror/mode/htmlmixed/htmlmixed.js';\n\nimport {CommandExecutorService} from './common/services/command-executor.service';\nimport {MessageService} from './common/services/message.service';\n\nimport {ngxEditorConfig, codeMirrorConfig} from './common/ngx-editor.defaults';\nimport * as Utils from './common/utils/ngx-editor.utils';\n\n@Component({\n  selector: 'app-ngx-editor',\n  template: `<div class=\"ngx-editor\" id=\"ngxEditor\" [style.width]=\"config['width']\" [style.minWidth]=\"config['minWidth']\" tabindex=\"0\"\n  (focus)=\"onEditorFocus()\">\n\n  <app-ngx-editor-toolbar [config]=\"config\" (execute)=\"executeCommand($event)\"></app-ngx-editor-toolbar>\n\n  <!-- text area -->\n  <div class=\"ngx-wrapper\" [hidden]=\"codeEditorMode\" #ngxWrapper>\n    <div class=\"ngx-editor-textarea\" [attr.contenteditable]=\"config['editable']\" (input)=\"onContentChange($event.target.innerHTML)\"\n      [attr.translate]=\"config['translate']\" [attr.spellcheck]=\"config['spellcheck']\" [style.height]=\"config['height']\" [style.minHeight]=\"config['minHeight']\"\n      [style.resize]=\"Utils?.canResize(resizer)\" (focus)=\"onTextAreaFocus()\" (blur)=\"onTextAreaBlur()\" #ngxTextArea></div>\n\n    <span class=\"ngx-editor-placeholder\">{{ placeholder || config['placeholder'] }}</span>\n  </div>\n\n  <textarea [attr.placeholder]=\"placeholder || config['placeholder']\" [hidden]=\"true\" #ngxCodeEditor></textarea>\n\n  <app-ngx-editor-message></app-ngx-editor-message>\n  <app-ngx-grippie *ngIf=\"resizer === 'stack'\"></app-ngx-grippie>\n\n</div>\n`,\n  styles: [`.ngx-editor{position:relative}.ngx-editor ::ng-deep [contenteditable=true]:empty:before{content:attr(placeholder);display:block;color:#868e96;opacity:1}.ngx-editor .ngx-wrapper{position:relative}.ngx-editor .ngx-wrapper .ngx-editor-textarea{min-height:5rem;padding:.5rem .8rem 1rem;border:1px solid #ddd;background-color:transparent;overflow-x:hidden;overflow-y:auto;z-index:2;position:relative}.ngx-editor .ngx-wrapper .ngx-editor-textarea.focus,.ngx-editor .ngx-wrapper .ngx-editor-textarea:focus{outline:0}.ngx-editor .ngx-wrapper .ngx-editor-textarea ::ng-deep blockquote{margin-left:1rem;border-left:.2em solid #dfe2e5;padding-left:.5rem}.ngx-editor .ngx-wrapper ::ng-deep p{margin-bottom:0}.ngx-editor .ngx-wrapper .ngx-editor-placeholder{display:none;position:absolute;top:0;padding:.5rem .8rem 1rem .9rem;z-index:1;color:#6c757d;opacity:1}.ngx-editor .ngx-wrapper.show-placeholder .ngx-editor-placeholder{display:block}.ngx-editor ::ng-deep .CodeMirror{border:1px solid #ddd;z-index:2}.ngx-editor ::ng-deep .CodeMirror .CodeMirror-placeholder{color:#6c757d}`],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => NgxEditorComponent),\n      multi: true\n    }\n  ]\n})\n\nexport class NgxEditorComponent implements OnInit, ControlValueAccessor {\n\n  /** Specifies weather the textarea to be editable or not */\n  @Input() editable: boolean;\n  /** The spellcheck property specifies whether the element is to have its spelling and grammar checked or not. */\n  @Input() spellcheck: boolean;\n  /** Placeholder for the textArea */\n  @Input() placeholder: string;\n  /**\n   * The translate property specifies whether the content of an element should be translated or not.\n   *\n   * Check https://www.w3schools.com/tags/att_global_translate.asp for more information and browser support\n   */\n  @Input() translate: string;\n  /** Sets height of the editor */\n  @Input() height: string;\n  /** Sets minimum height for the editor */\n  @Input() minHeight: string;\n  /** Sets Width of the editor */\n  @Input() width: string;\n  /** Sets minimum width of the editor */\n  @Input() minWidth: string;\n  /**\n   * Toolbar accepts an array which specifies the options to be enabled for the toolbar\n   *\n   * Check ngxEditorConfig for toolbar configuration\n   *\n   * Passing an empty array will enable all toolbar\n   */\n  @Input() toolbar: Object;\n  /**\n   * The editor can be resized vertically.\n   *\n   * `basic` resizer enables the html5 reszier. Check here https://www.w3schools.com/cssref/css3_pr_resize.asp\n   *\n   * `stack` resizer enable a resizer that looks like as if in https://stackoverflow.com\n   */\n  @Input() resizer = 'stack';\n  /**\n   * The config property is a JSON object\n   *\n   * All avaibale inputs inputs can be provided in the configuration as JSON\n   * inputs provided directly are considered as top priority\n   */\n  @Input() config = ngxEditorConfig;\n  /** Weather to show or hide toolbar */\n  @Input() showToolbar: boolean;\n  /** Weather to enable or disable the toolbar */\n  @Input() enableToolbar: boolean;\n  /** Endpoint for which the image to be uploaded */\n  @Input() imageEndPoint: string;\n\n  /** emits `blur` event when focused out from the textarea */\n  @Output() blur: EventEmitter<string> = new EventEmitter<string>();\n  /** emits `focus` event when focused in to the textarea */\n  @Output() focus: EventEmitter<string> = new EventEmitter<string>();\n\n  @ViewChild('ngxTextArea') textArea: any;\n  @ViewChild('ngxCodeEditor') codeEditor: any;\n  @ViewChild('ngxWrapper') ngxWrapper: any;\n\n  Utils: any = Utils;\n  codeEditorMode = false;\n\n  private ngxCodeMirror: any = undefined;\n  private onChange: (value: string) => void;\n  private onTouched: () => void;\n\n  /**\n   * @param _messageService service to send message to the editor message component\n   * @param _commandExecutor executes command from the toolbar\n   * @param _renderer access and manipulate the dom element\n   */\n  constructor(\n    private _messageService: MessageService,\n    private _commandExecutor: CommandExecutorService,\n    private _renderer: Renderer2) {\n  }\n\n  /**\n   * events\n   */\n  onTextAreaFocus(): void {\n    this.focus.emit('focus');\n    return;\n  }\n\n  /** focus the text area when the editor is focussed */\n  onEditorFocus() {\n    this.textArea.nativeElement.focus();\n  }\n\n  /**\n   * Executed from the contenteditable section while the input property changes\n   * @param html html string from contenteditable\n   */\n  onContentChange(html: string): void {\n\n    if (typeof this.onChange === 'function') {\n      this.onChange(html);\n      this.togglePlaceholder(html);\n    }\n\n    return;\n  }\n\n  onTextAreaBlur(): void {\n\n    /** save selection if focussed out */\n    this._commandExecutor.savedSelection = Utils.saveSelection();\n\n    if (typeof this.onTouched === 'function') {\n      this.onTouched();\n    }\n    this.blur.emit('blur');\n    return;\n  }\n\n  /**\n   * resizing text area\n   *\n   * @param offsetY vertical height of the eidtable portion of the editor\n   */\n  resizeTextArea(offsetY: number): void {\n    let newHeight = parseInt(this.height, 10);\n    newHeight += offsetY;\n    this.height = newHeight + 'px';\n    this.textArea.nativeElement.style.height = this.height;\n\n    /**\n     * update code-editor height only on editor mode\n     */\n    if (this.codeEditorMode) {\n      this.ngxCodeMirror.setSize('100%', this.height);\n    }\n    return;\n  }\n\n  /**\n   * editor actions, i.e., executes command from toolbar\n   *\n   * @param commandName name of the command to be executed\n   */\n  executeCommand(commandName: string): void {\n\n    if (commandName === 'code') {\n      this.toggleCodeEditor();\n      return;\n    }\n\n    try {\n      this._commandExecutor.execute(commandName);\n    } catch (error) {\n      this._messageService.sendMessage(error.message);\n    }\n\n    return;\n  }\n\n  /**\n   * Write a new value to the element.\n   *\n   * @param value value to be executed when there is a change in contenteditable\n   */\n  writeValue(value: any): void {\n\n    this.togglePlaceholder(value);\n\n    if (value === null || value === undefined || value === '' || value === '<br>') {\n      value = null;\n    }\n\n    this.refreshView(value);\n  }\n\n  /**\n   * Set the function to be called\n   * when the control receives a change event.\n   *\n   * @param fn a function\n   */\n  registerOnChange(fn: any): void {\n    this.onChange = fn;\n  }\n\n  /**\n   * Set the function to be called\n   * when the control receives a touch event.\n   *\n   * @param fn a function\n   */\n  registerOnTouched(fn: any): void {\n    this.onTouched = fn;\n  }\n\n  /**\n   * refresh view/HTML of the editor\n   *\n   * @param value html string from the editor\n   */\n  refreshView(value: string): void {\n    const normalizedValue = value === null ? '' : value;\n    this._renderer.setProperty(this.textArea.nativeElement, 'innerHTML', normalizedValue);\n    return;\n  }\n\n  /**\n   * toggle between codeview and editor\n   */\n  toggleCodeEditor(): void {\n    this.codeEditorMode = !this.codeEditorMode;\n\n    if (this.codeEditorMode) {\n\n      this.ngxCodeMirror = CodeMirror.fromTextArea(this.codeEditor.nativeElement, codeMirrorConfig);\n\n      /** set value of the code editor */\n      this.ngxCodeMirror.setValue(this.textArea.nativeElement.innerHTML);\n\n      /** sets height of the code editor as same as the height of the textArea */\n      this.ngxCodeMirror.setSize('100%', this.height);\n\n    } else {\n\n      /** remove/ destroy code editor */\n      this.ngxCodeMirror.toTextArea();\n\n      /** update the model value and html content on the contenteditable */\n      this.refreshView(this.ngxCodeMirror.getValue());\n      this.onContentChange(this.ngxCodeMirror.getValue());\n\n    }\n    return;\n  }\n\n  /**\n   * toggles placeholder based on input string\n   *\n   * @param value A HTML string from the editor\n   */\n  togglePlaceholder(value: any): void {\n    if (!value || value === '<br>' || value === '') {\n      this._renderer.addClass(this.ngxWrapper.nativeElement, 'show-placeholder');\n    } else {\n      this._renderer.removeClass(this.ngxWrapper.nativeElement, 'show-placeholder');\n    }\n    return;\n  }\n\n  /**\n   * returns a json containing input params\n   */\n  getCollectiveParams(): any {\n    return {\n      editable: this.editable,\n      spellcheck: this.spellcheck,\n      placeholder: this.placeholder,\n      translate: this.translate,\n      height: this.height,\n      minHeight: this.minHeight,\n      width: this.width,\n      minWidth: this.minWidth,\n      enableToolbar: this.enableToolbar,\n      showToolbar: this.showToolbar,\n      imageEndPoint: this.imageEndPoint,\n      toolbar: this.toolbar\n    };\n  }\n\n  ngOnInit() {\n    /**\n     * set configuartion\n     */\n    this.config = this.Utils.getEditorConfiguration(this.config, ngxEditorConfig, this.getCollectiveParams());\n\n    this.height = this.height || this.textArea.nativeElement.offsetHeight;\n\n    this.executeCommand('enableObjectResizing');\n\n  }\n\n}\n",
    "import { Component, HostListener } from '@angular/core';\nimport { NgxEditorComponent } from '../ngx-editor.component';\n\n@Component({\n  selector: 'app-ngx-grippie',\n  template: `<div class=\"ngx-editor-grippie\">\n  <svg xmlns=\"http://www.w3.org/2000/svg\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" style=\"isolation:isolate\" viewBox=\"651.6 235 26 5\"\n    width=\"26\" height=\"5\">\n    <g id=\"sprites\">\n      <path d=\" M 651.6 235 L 653.6 235 L 653.6 237 L 651.6 237 M 654.6 238 L 656.6 238 L 656.6 240 L 654.6 240 M 660.6 238 L 662.6 238 L 662.6 240 L 660.6 240 M 666.6 238 L 668.6 238 L 668.6 240 L 666.6 240 M 672.6 238 L 674.6 238 L 674.6 240 L 672.6 240 M 657.6 235 L 659.6 235 L 659.6 237 L 657.6 237 M 663.6 235 L 665.6 235 L 665.6 237 L 663.6 237 M 669.6 235 L 671.6 235 L 671.6 237 L 669.6 237 M 675.6 235 L 677.6 235 L 677.6 237 L 675.6 237\"\n        fill=\"rgb(147,153,159)\" />\n    </g>\n  </svg>\n</div>\n`,\n  styles: [`.ngx-editor-grippie{height:9px;background-color:#f1f1f1;position:relative;text-align:center;cursor:s-resize;border:1px solid #ddd;border-top:transparent}.ngx-editor-grippie svg{position:absolute;top:1.5px;width:50%;right:25%}`]\n})\n\nexport class NgxGrippieComponent {\n\n  /** height of the editor */\n  height: number;\n  /** previous value befor resizing the editor */\n  oldY = 0;\n  /** set to true on mousedown event */\n  grabber = false;\n\n  /**\n   * Constructor\n   *\n   * @param _editorComponent Editor component\n   */\n  constructor(private _editorComponent: NgxEditorComponent) { }\n\n  /**\n   *\n   * @param event Mouseevent\n   *\n   * Update the height of the editor when the grabber is dragged\n   */\n  @HostListener('document:mousemove', ['$event']) onMouseMove(event: MouseEvent) {\n\n    if (!this.grabber) {\n      return;\n    }\n\n    this._editorComponent.resizeTextArea(event.clientY - this.oldY);\n    this.oldY = event.clientY;\n  }\n\n  /**\n   *\n   * @param event Mouseevent\n   *\n   * set the grabber to false on mouse up action\n   */\n  @HostListener('document:mouseup', ['$event']) onMouseUp(event: MouseEvent) {\n    this.grabber = false;\n  }\n\n  @HostListener('mousedown', ['$event']) onResize(event: MouseEvent, resizer?: Function) {\n    this.grabber = true;\n    this.oldY = event.clientY;\n    event.preventDefault();\n  }\n\n}\n",
    "import { Component } from '@angular/core';\n\nimport { MessageService } from '../common/services/message.service';\n\n@Component({\n  selector: 'app-ngx-editor-message',\n  template: `<div class=\"ngx-editor-message\" *ngIf=\"ngxMessage\" (dblclick)=\"clearMessage()\">\n  {{ ngxMessage }}\n</div>\n`,\n  styles: [`.ngx-editor-message{font-size:80%;background-color:#f1f1f1;border:1px solid #ddd;border-top:transparent;padding:0 .5rem .1rem;-webkit-transition:.5s ease-in;transition:.5s ease-in}`]\n})\n\nexport class NgxEditorMessageComponent {\n\n  /** property that holds the message to be displayed on the editor */\n  ngxMessage = undefined;\n\n  /**\n   * @param _messageService service to send message to the editor\n   */\n  constructor(private _messageService: MessageService) {\n    this._messageService.getMessage().subscribe((message: string) => this.ngxMessage = message);\n  }\n\n  /**\n   * clears editor message\n   */\n  clearMessage(): void {\n    this.ngxMessage = undefined;\n    return;\n  }\n}\n",
    "import {Component, Input, Output, EventEmitter, OnInit, ViewChild} from '@angular/core';\nimport {FormBuilder, FormGroup, Validators} from '@angular/forms';\nimport {HttpResponse} from '@angular/common/http';\nimport {PopoverConfig} from 'ngx-bootstrap';\nimport {CommandExecutorService} from '../common/services/command-executor.service';\nimport {MessageService} from '../common/services/message.service';\nimport * as Utils from '../common/utils/ngx-editor.utils';\n\n@Component({\n  selector: 'app-ngx-editor-toolbar',\n  template: `<div class=\"ngx-toolbar\" *ngIf=\"config['showToolbar']\">\n  <div class=\"ngx-toolbar-set\">\n    <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('bold')\"\n            (click)=\"triggerCommand('bold')\"\n            title=\"Bold\" [disabled]=\"!config['enableToolbar']\">\n      <i class=\"fas fa-bold\" aria-hidden=\"true\"></i>\n    </button>\n    <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('italic')\"\n            (click)=\"triggerCommand('italic')\"\n            title=\"Italic\" [disabled]=\"!config['enableToolbar']\">\n      <i class=\"fas fa-italic\" aria-hidden=\"true\"></i>\n    </button>\n    <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('underline')\"\n            (click)=\"triggerCommand('underline')\"\n            title=\"Underline\" [disabled]=\"!config['enableToolbar']\">\n      <i class=\"fas fa-underline\" aria-hidden=\"true\"></i>\n    </button>\n    <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('strikeThrough')\"\n            (click)=\"triggerCommand('strikeThrough')\"\n            title=\"Strikethrough\" [disabled]=\"!config['enableToolbar']\">\n      <i class=\"fas fa-strikethrough\" aria-hidden=\"true\"></i>\n    </button>\n    <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('superscript')\"\n            (click)=\"triggerCommand('superscript')\"\n            title=\"Superscript\" [disabled]=\"!config['enableToolbar']\">\n      <i class=\"fas fa-superscript\" aria-hidden=\"true\"></i>\n    </button>\n    <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('subscript')\"\n            (click)=\"triggerCommand('subscript')\"\n            title=\"Subscript\" [disabled]=\"!config['enableToolbar']\">\n      <i class=\"fas fa-subscript\" aria-hidden=\"true\"></i>\n    </button>\n  </div>\n  <div class=\"ngx-toolbar-set\">\n    <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('fontName')\" (click)=\"fontName = ''\"\n            title=\"Font Family\"\n            [popover]=\"fontNameTemplate\" #fontNamePopover=\"bs-popover\" containerClass=\"ngxePopover\"\n            [disabled]=\"!config['enableToolbar']\">\n      <i class=\"fas fa-font\" aria-hidden=\"true\"></i>\n    </button>\n    <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('fontSize')\" (click)=\"fontSize = ''\"\n            title=\"Font Size\"\n            [popover]=\"fontSizeTemplate\" #fontSizePopover=\"bs-popover\" containerClass=\"ngxePopover\"\n            [disabled]=\"!config['enableToolbar']\">\n      <i class=\"fas fa-text-height\" aria-hidden=\"true\"></i>\n    </button>\n    <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('color')\" (click)=\"hexColor = ''\"\n            title=\"Color Picker\"\n            [popover]=\"insertColorTemplate\" #colorPopover=\"bs-popover\" containerClass=\"ngxePopover\"\n            [disabled]=\"!config['enableToolbar']\">\n      <i class=\"fas fa-tint\" aria-hidden=\"true\"></i>\n    </button>\n  </div>\n  <div class=\"ngx-toolbar-set\">\n    <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('justifyLeft')\"\n            (click)=\"triggerCommand('justifyLeft')\"\n            title=\"Justify Left\" [disabled]=\"!config['enableToolbar']\">\n      <i class=\"fas fa-align-left\" aria-hidden=\"true\"></i>\n    </button>\n    <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('justifyCenter')\"\n            (click)=\"triggerCommand('justifyCenter')\"\n            title=\"Justify Center\" [disabled]=\"!config['enableToolbar']\">\n      <i class=\"fas fa-align-center\" aria-hidden=\"true\"></i>\n    </button>\n    <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('justifyRight')\"\n            (click)=\"triggerCommand('justifyRight')\"\n            title=\"Justify Right\" [disabled]=\"!config['enableToolbar']\">\n      <i class=\"fas fa-align-right\" aria-hidden=\"true\"></i>\n    </button>\n    <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('justifyFull')\"\n            (click)=\"triggerCommand('justifyFull')\"\n            title=\"Justify\" [disabled]=\"!config['enableToolbar']\">\n      <i class=\"fas fa-align-justify\" aria-hidden=\"true\"></i>\n    </button>\n    <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('indent')\"\n            (click)=\"triggerCommand('indent')\"\n            title=\"Indent\" [disabled]=\"!config['enableToolbar']\">\n      <i class=\"fas fa-indent\" aria-hidden=\"true\"></i>\n    </button>\n    <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('outdent')\"\n            (click)=\"triggerCommand('outdent')\"\n            title=\"Outdent\" [disabled]=\"!config['enableToolbar']\">\n      <i class=\"fas fa-outdent\" aria-hidden=\"true\"></i>\n    </button>\n  </div>\n  <div class=\"ngx-toolbar-set\">\n    <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('cut')\"\n            (click)=\"triggerCommand('cut')\" title=\"Cut\"\n            [disabled]=\"!config['enableToolbar']\">\n      <i class=\"fas fa-scissors\" aria-hidden=\"true\"></i>\n    </button>\n    <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('copy')\"\n            (click)=\"triggerCommand('copy')\"\n            title=\"Copy\" [disabled]=\"!config['enableToolbar']\">\n      <i class=\"fas fa-clone\" aria-hidden=\"true\"></i>\n    </button>\n    <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('delete')\"\n            (click)=\"triggerCommand('delete')\"\n            title=\"Delete\" [disabled]=\"!config['enableToolbar']\">\n      <i class=\"fas fa-trash\" aria-hidden=\"true\"></i>\n    </button>\n    <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('removeFormat')\"\n            (click)=\"triggerCommand('removeFormat')\"\n            title=\"Clear Formatting\" [disabled]=\"!config['enableToolbar']\">\n      <i class=\"fas fa-eraser\" aria-hidden=\"true\"></i>\n    </button>\n    <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('undo')\"\n            (click)=\"triggerCommand('undo')\"\n            title=\"Undo\" [disabled]=\"!config['enableToolbar']\">\n      <i class=\"fas fa-undo\" aria-hidden=\"true\"></i>\n    </button>\n    <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('redo')\"\n            (click)=\"triggerCommand('redo')\"\n            title=\"Redo\" [disabled]=\"!config['enableToolbar']\">\n      <i class=\"fas fa-repeat\" aria-hidden=\"true\"></i>\n    </button>\n  </div>\n  <div class=\"ngx-toolbar-set\">\n    <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('paragraph')\"\n            (click)=\"triggerCommand('insertParagraph')\"\n            title=\"Paragraph\" [disabled]=\"!config['enableToolbar']\">\n      <i class=\"fas fa-paragraph\" aria-hidden=\"true\"></i>\n    </button>\n    <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('blockquote')\"\n            (click)=\"triggerCommand('blockquote')\"\n            title=\"Blockquote\" [disabled]=\"!config['enableToolbar']\">\n      <i class=\"fas fa-quote-left\" aria-hidden=\"true\"></i>\n    </button>\n    <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('removeBlockquote')\"\n            (click)=\"triggerCommand('removeBlockquote')\"\n            title=\"Remove Blockquote\" [disabled]=\"!config['enableToolbar']\">\n      <i class=\"fas fa-quote-right\" aria-hidden=\"true\"></i>\n    </button>\n    <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('horizontalLine')\"\n            (click)=\"triggerCommand('insertHorizontalRule')\"\n            title=\"Horizontal Line\" [disabled]=\"!config['enableToolbar']\">\n      <i class=\"fas fa-minus\" aria-hidden=\"true\"></i>\n    </button>\n    <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('unorderedList')\"\n            (click)=\"triggerCommand('insertUnorderedList')\"\n            title=\"Unordered List\" [disabled]=\"!config['enableToolbar']\">\n      <i class=\"fas fa-list-ul\" aria-hidden=\"true\"></i>\n    </button>\n    <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('orderedList')\"\n            (click)=\"triggerCommand('insertOrderedList')\"\n            title=\"Ordered List\" [disabled]=\"!config['enableToolbar']\">\n      <i class=\"fas fa-list-ol\" aria-hidden=\"true\"></i>\n    </button>\n  </div>\n  <div class=\"ngx-toolbar-set\">\n    <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('link')\" (click)=\"buildUrlForm()\"\n            [popover]=\"insertLinkTemplate\"\n            title=\"Insert Link\" #urlPopover=\"bs-popover\" containerClass=\"ngxePopover\"\n            [disabled]=\"!config['enableToolbar']\">\n      <i class=\"fas fa-link\" aria-hidden=\"true\"></i>\n    </button>\n    <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('unlink')\"\n            (click)=\"triggerCommand('unlink')\"\n            title=\"Unlink\" [disabled]=\"!config['enableToolbar']\">\n      <i class=\"fas fa-chain-broken\" aria-hidden=\"true\"></i>\n    </button>\n    <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('image')\" (click)=\"buildImageForm()\"\n            title=\"Insert Image\"\n            [popover]=\"insertImageTemplate\" #imagePopover=\"bs-popover\" containerClass=\"ngxePopover\"\n            [disabled]=\"!config['enableToolbar']\">\n      <i class=\"fas fa-image\"></i>\n    </button>\n    <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('video')\" (click)=\"buildVideoForm()\"\n            title=\"Insert Video\"\n            [popover]=\"insertVideoTemplate\" #videoPopover=\"bs-popover\" containerClass=\"ngxePopover\"\n            [disabled]=\"!config['enableToolbar']\">\n      <i class=\"fas fa-youtube-play\" aria-hidden=\"true\"></i>\n    </button>\n  </div>\n  <div class=\"ngx-toolbar-set\">\n    <button type=\"button\" class=\"ngx-editor-button\" *ngIf=\"canEnableToolbarOptions('code')\"\n            (click)=\"triggerCommand('code')\"\n            title=\"View Code\" [disabled]=\"!config['enableToolbar']\">\n      <i class=\"fas fa-code\" aria-hidden=\"true\"></i>\n    </button>\n  </div>\n</div>\n\n<!-- URL Popover template -->\n<ng-template #insertLinkTemplate>\n  <div class=\"ngxe-popover extra-gt\">\n    <form [formGroup]=\"urlForm\" (ngSubmit)=\"urlForm.valid && insertLink()\" autocomplete=\"off\">\n      <div class=\"form-group\">\n        <label for=\"urlInput\" class=\"small\">URL</label>\n        <input type=\"text\" class=\"form-control-sm\" id=\"URLInput\" placeholder=\"URL\" formControlName=\"urlLink\" required>\n      </div>\n      <div class=\"form-group\">\n        <label for=\"urlTextInput\" class=\"small\">Text</label>\n        <input type=\"text\" class=\"form-control-sm\" id=\"urlTextInput\" placeholder=\"Text\" formControlName=\"urlText\"\n               required>\n      </div>\n      <div class=\"form-check\">\n        <input type=\"checkbox\" class=\"form-check-input\" id=\"urlNewTab\" formControlName=\"urlNewTab\">\n        <label class=\"form-check-label\" for=\"urlNewTab\">Open in new tab</label>\n      </div>\n      <button type=\"submit\" class=\"btn-primary btn-sm btn\">Submit</button>\n    </form>\n  </div>\n</ng-template>\n\n<!-- Image Uploader Popover template -->\n<ng-template #insertImageTemplate>\n  <div class=\"ngxe-popover imgc-ctnr\">\n    <div class=\"imgc-topbar btn-ctnr\">\n      <button type=\"button\" class=\"btn\" [ngClass]=\"{active: isImageUploader}\" (click)=\"isImageUploader = true\">\n        <i class=\"fas fa-upload\"></i>\n      </button>\n      <button type=\"button\" class=\"btn\" [ngClass]=\"{active: !isImageUploader}\" (click)=\"isImageUploader = false\">\n        <i class=\"fas fa-link\"></i>\n      </button>\n    </div>\n    <div class=\"imgc-ctnt is-image\">\n      <div *ngIf=\"isImageUploader; else insertImageLink\"></div>\n      <div *ngIf=\"!isImageUploader; else imageUploder\"></div>\n      <ng-template #imageUploder>\n        <div class=\"ngx-insert-img-ph\">\n          <p *ngIf=\"uploadComplete\">Choose Image</p>\n          <p *ngIf=\"!uploadComplete\">\n            <span>Uploading Image</span>\n            <br>\n            <span>{{ updloadPercentage }} %</span>\n          </p>\n          <div class=\"ngxe-img-upl-frm\">\n            <input type=\"file\" (change)=\"onFileChange($event)\" accept=\"image/*\" [disabled]=\"isUploading\"\n                   [style.cursor]=\"isUploading ? 'not-allowed': 'allowed'\">\n          </div>\n        </div>\n      </ng-template>\n      <ng-template #insertImageLink>\n        <form class=\"extra-gt\" [formGroup]=\"imageForm\" (ngSubmit)=\"imageForm.valid && insertImage()\" autocomplete=\"off\">\n          <div class=\"form-group\">\n            <label for=\"imageURLInput\" class=\"small\">URL</label>\n            <input type=\"text\" class=\"form-control-sm\" id=\"imageURLInput\" placeholder=\"URL\" formControlName=\"imageUrl\"\n                   required>\n          </div>\n          <button type=\"submit\" class=\"btn-primary btn-sm btn\">Submit</button>\n        </form>\n      </ng-template>\n      <div class=\"progress\" *ngIf=\"!uploadComplete\">\n        <div class=\"progress-bar progress-bar-striped progress-bar-animated bg-success\"\n             [ngClass]=\"{'bg-danger': updloadPercentage<20, 'bg-warning': updloadPercentage<50, 'bg-success': updloadPercentage>=100}\"\n             [style.width.%]=\"updloadPercentage\"></div>\n      </div>\n    </div>\n  </div>\n</ng-template>\n\n\n<!-- Insert Video Popover template -->\n<ng-template #insertVideoTemplate>\n  <div class=\"ngxe-popover imgc-ctnr\">\n    <div class=\"imgc-topbar btn-ctnr\">\n      <button type=\"button\" class=\"btn active\">\n        <i class=\"fas fa-link\"></i>\n      </button>\n    </div>\n    <div class=\"imgc-ctnt is-image\">\n      <form class=\"extra-gt\" [formGroup]=\"videoForm\" (ngSubmit)=\"videoForm.valid && insertVideo()\" autocomplete=\"off\">\n        <div class=\"form-group\">\n          <label for=\"videoURLInput\" class=\"small\">URL</label>\n          <input type=\"text\" class=\"form-control-sm\" id=\"videoURLInput\" placeholder=\"URL\" formControlName=\"videoUrl\"\n                 required>\n        </div>\n        <div class=\"row form-group\">\n          <div class=\"col\">\n            <input type=\"text\" class=\"form-control-sm\" formControlName=\"height\" placeholder=\"height (px)\"\n                   (keypress)=\"onlyNumbers($event)\">\n          </div>\n          <div class=\"col\">\n            <input type=\"text\" class=\"form-control-sm\" formControlName=\"width\" placeholder=\"width (px)\"\n                   (keypress)=\"onlyNumbers($event)\">\n          </div>\n          <label class=\"small\">Height/Width</label>\n        </div>\n        <button type=\"submit\" class=\"btn-primary btn-sm btn\">Submit</button>\n      </form>\n    </div>\n  </div>\n</ng-template>\n\n<!-- Insert color template -->\n<ng-template #insertColorTemplate>\n  <div class=\"ngxe-popover imgc-ctnr\">\n    <div class=\"imgc-topbar two-tabs\">\n      <span (click)=\"selectedColorTab ='textColor'\" [ngClass]=\"{active: selectedColorTab ==='textColor'}\">Text</span>\n      <span (click)=\"selectedColorTab ='backgroundColor'\" [ngClass]=\"{active: selectedColorTab ==='backgroundColor'}\">Background</span>\n    </div>\n    <div class=\"imgc-ctnt is-color extra-gt1\">\n      <form autocomplete=\"off\">\n        <div class=\"form-group\">\n          <label for=\"hexInput\" class=\"small\">Hex Color</label>\n          <input type=\"text\" class=\"form-control-sm\" id=\"hexInput\" name=\"hexInput\" maxlength=\"7\" placeholder=\"HEX Color\"\n                 [(ngModel)]=\"hexColor\"\n                 required>\n        </div>\n        <button type=\"button\" class=\"btn-primary btn-sm btn\" (click)=\"insertColor(hexColor, selectedColorTab)\">Submit\n        </button>\n      </form>\n    </div>\n  </div>\n</ng-template>\n\n<!-- font size template -->\n<ng-template #fontSizeTemplate>\n  <div class=\"ngxe-popover extra-gt1\">\n    <form autocomplete=\"off\">\n      <div class=\"form-group\">\n        <label for=\"fontSize\" class=\"small\">Font Size</label>\n        <input type=\"text\" class=\"form-control-sm\" id=\"fontSize\" name=\"fontSize\" placeholder=\"Font size in px/rem\"\n               [(ngModel)]=\"fontSize\"\n               required>\n      </div>\n      <button type=\"button\" class=\"btn-primary btn-sm btn\" (click)=\"setFontSize(fontSize)\">Submit</button>\n    </form>\n  </div>\n</ng-template>\n\n<!-- font family/name template -->\n<ng-template #fontNameTemplate>\n  <div class=\"ngxe-popover extra-gt1\">\n    <form autocomplete=\"off\">\n      <div class=\"form-group\">\n        <label for=\"fontSize\" class=\"small\">Font Size</label>\n        <input type=\"text\" class=\"form-control-sm\" id=\"fontSize\" name=\"fontName\"\n               placeholder=\"Ex: 'Times New Roman', Times, serif\"\n               [(ngModel)]=\"fontName\" required>\n      </div>\n      <button type=\"button\" class=\"btn-primary btn-sm btn\" (click)=\"setFontName(fontName)\">Submit</button>\n    </form>\n  </div>\n</ng-template>\n`,\n  styles: [`::ng-deep .ngxePopover.popover{position:absolute;top:0;left:0;z-index:1060;display:block;max-width:276px;font-family:-apple-system,BlinkMacSystemFont,\"Segoe UI\",Roboto,\"Helvetica Neue\",Arial,sans-serif,\"Apple Color Emoji\",\"Segoe UI Emoji\",\"Segoe UI Symbol\";font-style:normal;font-weight:400;line-height:1.5;text-align:left;text-align:start;text-decoration:none;text-shadow:none;text-transform:none;letter-spacing:normal;word-break:normal;word-spacing:normal;white-space:normal;line-break:auto;font-size:.875rem;word-wrap:break-word;background-color:#fff;background-clip:padding-box;border:1px solid rgba(0,0,0,.2);border-radius:.3rem}::ng-deep .ngxePopover.popover .arrow{position:absolute;display:block;width:1rem;height:.5rem;margin:0 .3rem}::ng-deep .ngxePopover.popover .arrow::after,::ng-deep .ngxePopover.popover .arrow::before{position:absolute;display:block;content:\"\";border-color:transparent;border-style:solid}::ng-deep .ngxePopover.popover .popover-header{padding:.5rem .75rem;margin-bottom:0;font-size:1rem;color:inherit;background-color:#f7f7f7;border-bottom:1px solid #ebebeb;border-top-left-radius:calc(.3rem - 1px);border-top-right-radius:calc(.3rem - 1px)}::ng-deep .ngxePopover.popover .popover-header:empty{display:none}::ng-deep .ngxePopover.popover .popover-body{padding:.5rem .75rem;color:#212529}::ng-deep .ngxePopover.popover.bs-popover-auto[x-placement^=top],::ng-deep .ngxePopover.popover.bs-popover-top{margin-bottom:.5rem}::ng-deep .ngxePopover.popover.bs-popover-auto[x-placement^=top] .arrow,::ng-deep .ngxePopover.popover.bs-popover-top .arrow{bottom:calc((.5rem + 1px) * -1)}::ng-deep .ngxePopover.popover.bs-popover-auto[x-placement^=top] .arrow::after,::ng-deep .ngxePopover.popover.bs-popover-auto[x-placement^=top] .arrow::before,::ng-deep .ngxePopover.popover.bs-popover-top .arrow::after,::ng-deep .ngxePopover.popover.bs-popover-top .arrow::before{border-width:.5rem .5rem 0}::ng-deep .ngxePopover.popover.bs-popover-auto[x-placement^=top] .arrow::before,::ng-deep .ngxePopover.popover.bs-popover-top .arrow::before{bottom:0;border-top-color:rgba(0,0,0,.25)}::ng-deep .ngxePopover.popover.bs-popover-auto[x-placement^=top] .arrow::after,::ng-deep .ngxePopover.popover.bs-popover-top .arrow::after{bottom:1px;border-top-color:#fff}::ng-deep .ngxePopover.popover.bs-popover-auto[x-placement^=right],::ng-deep .ngxePopover.popover.bs-popover-right{margin-left:.5rem}::ng-deep .ngxePopover.popover.bs-popover-auto[x-placement^=right] .arrow,::ng-deep .ngxePopover.popover.bs-popover-right .arrow{left:calc((.5rem + 1px) * -1);width:.5rem;height:1rem;margin:.3rem 0}::ng-deep .ngxePopover.popover.bs-popover-auto[x-placement^=right] .arrow::after,::ng-deep .ngxePopover.popover.bs-popover-auto[x-placement^=right] .arrow::before,::ng-deep .ngxePopover.popover.bs-popover-right .arrow::after,::ng-deep .ngxePopover.popover.bs-popover-right .arrow::before{border-width:.5rem .5rem .5rem 0}::ng-deep .ngxePopover.popover.bs-popover-auto[x-placement^=right] .arrow::before,::ng-deep .ngxePopover.popover.bs-popover-right .arrow::before{left:0;border-right-color:rgba(0,0,0,.25)}::ng-deep .ngxePopover.popover.bs-popover-auto[x-placement^=right] .arrow::after,::ng-deep .ngxePopover.popover.bs-popover-right .arrow::after{left:1px;border-right-color:#fff}::ng-deep .ngxePopover.popover.bs-popover-auto[x-placement^=bottom],::ng-deep .ngxePopover.popover.bs-popover-bottom{margin-top:.5rem}::ng-deep .ngxePopover.popover.bs-popover-auto[x-placement^=bottom] .arrow,::ng-deep .ngxePopover.popover.bs-popover-bottom .arrow{left:45%!important;top:calc((.5rem + 1px) * -1)}::ng-deep .ngxePopover.popover.bs-popover-auto[x-placement^=bottom] .arrow::after,::ng-deep .ngxePopover.popover.bs-popover-auto[x-placement^=bottom] .arrow::before,::ng-deep .ngxePopover.popover.bs-popover-bottom .arrow::after,::ng-deep .ngxePopover.popover.bs-popover-bottom .arrow::before{border-width:0 .5rem .5rem}::ng-deep .ngxePopover.popover.bs-popover-auto[x-placement^=bottom] .arrow::before,::ng-deep .ngxePopover.popover.bs-popover-bottom .arrow::before{top:0;border-bottom-color:rgba(0,0,0,.25)}::ng-deep .ngxePopover.popover.bs-popover-auto[x-placement^=bottom] .arrow::after,::ng-deep .ngxePopover.popover.bs-popover-bottom .arrow::after{top:1px;border-bottom-color:#fff}::ng-deep .ngxePopover.popover.bs-popover-auto[x-placement^=bottom] .popover-header::before,::ng-deep .ngxePopover.popover.bs-popover-bottom .popover-header::before{position:absolute;top:0;left:50%;display:block;width:1rem;margin-left:-.5rem;content:\"\";border-bottom:1px solid #f7f7f7}::ng-deep .ngxePopover.popover.bs-popover-auto[x-placement^=left],::ng-deep .ngxePopover.popover.bs-popover-left{margin-right:.5rem}::ng-deep .ngxePopover.popover.bs-popover-auto[x-placement^=left] .arrow,::ng-deep .ngxePopover.popover.bs-popover-left .arrow{right:calc((.5rem + 1px) * -1);width:.5rem;height:1rem;margin:.3rem 0}::ng-deep .ngxePopover.popover.bs-popover-auto[x-placement^=left] .arrow::after,::ng-deep .ngxePopover.popover.bs-popover-auto[x-placement^=left] .arrow::before,::ng-deep .ngxePopover.popover.bs-popover-left .arrow::after,::ng-deep .ngxePopover.popover.bs-popover-left .arrow::before{border-width:.5rem 0 .5rem .5rem}::ng-deep .ngxePopover.popover.bs-popover-auto[x-placement^=left] .arrow::before,::ng-deep .ngxePopover.popover.bs-popover-left .arrow::before{right:0;border-left-color:rgba(0,0,0,.25)}::ng-deep .ngxePopover.popover.bs-popover-auto[x-placement^=left] .arrow::after,::ng-deep .ngxePopover.popover.bs-popover-left .arrow::after{right:1px;border-left-color:#fff}::ng-deep .ngxePopover .btn{display:inline-block;font-weight:400;text-align:center;white-space:nowrap;vertical-align:middle;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;border:1px solid transparent;padding:.375rem .75rem;font-size:1rem;line-height:1.5;border-radius:.25rem;-webkit-transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,-webkit-box-shadow .15s ease-in-out;transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,-webkit-box-shadow .15s ease-in-out;transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out;transition:color .15s ease-in-out,background-color .15s ease-in-out,border-color .15s ease-in-out,box-shadow .15s ease-in-out,-webkit-box-shadow .15s ease-in-out}::ng-deep .ngxePopover .btn.btn-sm{padding:.25rem .5rem;font-size:.875rem;line-height:1.5;border-radius:.2rem}::ng-deep .ngxePopover .btn:active,::ng-deep .ngxePopover .btn:focus{outline:0;-webkit-box-shadow:none;box-shadow:none}::ng-deep .ngxePopover .btn.btn-primary{color:#fff;background-color:#007bff;border-color:#007bff}::ng-deep .ngxePopover .btn.btn-primary:hover{color:#fff;background-color:#0069d9;border-color:#0062cc}::ng-deep .ngxePopover .btn:not(:disabled):not(.disabled){cursor:pointer}::ng-deep .ngxePopover form .form-group{margin-bottom:1rem}::ng-deep .ngxePopover form .form-group input{overflow:visible}::ng-deep .ngxePopover form .form-group .form-control-sm{width:100%;outline:0;border:none;border-bottom:1px solid #bdbdbd;border-radius:0;margin-bottom:1px;padding:.25rem .5rem;font-size:.875rem;line-height:1.5}::ng-deep .ngxePopover form .form-group.row{display:-webkit-box;display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;margin-left:0;margin-right:0}::ng-deep .ngxePopover form .form-group.row .col{-ms-flex-preferred-size:0;flex-basis:0;-webkit-box-flex:1;-ms-flex-positive:1;flex-grow:1;max-width:100%;padding:0}::ng-deep .ngxePopover form .form-group.row .col:first-child{padding-right:15px}::ng-deep .ngxePopover form .form-check{position:relative;display:block;padding-left:1.25rem}::ng-deep .ngxePopover form .form-check .form-check-input{position:absolute;margin-top:.3rem;margin-left:-1.25rem}.ngx-toolbar{background-color:#f5f5f5;font-size:.8rem;padding:.2rem;border:1px solid #ddd}.ngx-toolbar .ngx-toolbar-set{display:inline-block;border-radius:5px;background-color:#fff}.ngx-toolbar .ngx-toolbar-set .ngx-editor-button{background-color:transparent;padding:.4rem;min-width:2.5rem;float:left;border:1px solid #ddd;border-right:transparent}.ngx-toolbar .ngx-toolbar-set .ngx-editor-button:hover{cursor:pointer;background-color:#f1f1f1;-webkit-transition:.2s ease;transition:.2s ease}.ngx-toolbar .ngx-toolbar-set .ngx-editor-button.focus,.ngx-toolbar .ngx-toolbar-set .ngx-editor-button:focus{outline:0}.ngx-toolbar .ngx-toolbar-set .ngx-editor-button:last-child{border-right:1px solid #ddd;border-top-right-radius:5px;border-bottom-right-radius:5px}.ngx-toolbar .ngx-toolbar-set .ngx-editor-button:first-child{border-top-left-radius:5px;border-bottom-left-radius:5px}.ngx-toolbar .ngx-toolbar-set .ngx-editor-button:disabled{background-color:#f5f5f5;pointer-events:none;cursor:not-allowed}::ng-deep .popover{border-top-right-radius:0;border-top-left-radius:0}::ng-deep .ngxe-popover{min-width:15rem;white-space:nowrap}::ng-deep .ngxe-popover .extra-gt,::ng-deep .ngxe-popover.extra-gt{padding-top:.5rem!important}::ng-deep .ngxe-popover .extra-gt1,::ng-deep .ngxe-popover.extra-gt1{padding-top:.75rem!important}::ng-deep .ngxe-popover .extra-gt2,::ng-deep .ngxe-popover.extra-gt2{padding-top:1rem!important}::ng-deep .ngxe-popover .form-group label{display:none;margin:0}::ng-deep .ngxe-popover .form-group .form-control-sm{width:100%;outline:0;border:none;border-bottom:1px solid #bdbdbd;border-radius:0;margin-bottom:1px;padding-left:0;padding-right:0}::ng-deep .ngxe-popover .form-group .form-control-sm:active,::ng-deep .ngxe-popover .form-group .form-control-sm:focus{border-bottom:2px solid #1e88e5;-webkit-box-shadow:none;box-shadow:none;margin-bottom:0}::ng-deep .ngxe-popover .form-group .form-control-sm.ng-dirty.ng-invalid:not(.ng-pristine){border-bottom:2px solid red}::ng-deep .ngxe-popover .form-check{margin-bottom:1rem}::ng-deep .ngxe-popover .btn:focus{-webkit-box-shadow:none!important;box-shadow:none!important}::ng-deep .ngxe-popover.imgc-ctnr{margin:-.5rem -.75rem}::ng-deep .ngxe-popover.imgc-ctnr .imgc-topbar{-webkit-box-shadow:0 1px 3px rgba(0,0,0,.12),0 1px 1px 1px rgba(0,0,0,.16);box-shadow:0 1px 3px rgba(0,0,0,.12),0 1px 1px 1px rgba(0,0,0,.16);border-bottom:0}::ng-deep .ngxe-popover.imgc-ctnr .imgc-topbar.btn-ctnr button{background-color:transparent;border-radius:0}::ng-deep .ngxe-popover.imgc-ctnr .imgc-topbar.btn-ctnr button:hover{cursor:pointer;background-color:#f1f1f1;-webkit-transition:.2s ease;transition:.2s ease}::ng-deep .ngxe-popover.imgc-ctnr .imgc-topbar.btn-ctnr button.active{color:#007bff;-webkit-transition:.2s ease;transition:.2s ease}::ng-deep .ngxe-popover.imgc-ctnr .imgc-topbar.two-tabs span{width:50%;text-align:center;display:inline-block;padding:.4rem 0;margin:0 -1px 2px}::ng-deep .ngxe-popover.imgc-ctnr .imgc-topbar.two-tabs span:hover{cursor:pointer}::ng-deep .ngxe-popover.imgc-ctnr .imgc-topbar.two-tabs span.active{margin-bottom:-2px;border-bottom:2px solid #007bff;color:#007bff}::ng-deep .ngxe-popover.imgc-ctnr .imgc-ctnt{padding:.5rem}::ng-deep .ngxe-popover.imgc-ctnr .imgc-ctnt.is-image .progress{height:.5rem;margin:.5rem -.5rem -.6rem}::ng-deep .ngxe-popover.imgc-ctnr .imgc-ctnt.is-image p{margin:0}::ng-deep .ngxe-popover.imgc-ctnr .imgc-ctnt.is-image .ngx-insert-img-ph{border:2px dashed #bdbdbd;padding:1.8rem 0;position:relative;letter-spacing:1px;text-align:center}::ng-deep .ngxe-popover.imgc-ctnr .imgc-ctnt.is-image .ngx-insert-img-ph:hover{background:#ebebeb}::ng-deep .ngxe-popover.imgc-ctnr .imgc-ctnt.is-image .ngx-insert-img-ph .ngxe-img-upl-frm{opacity:0;position:absolute;top:0;bottom:0;left:0;right:0;z-index:2147483640;overflow:hidden;margin:0;padding:0;width:100%}::ng-deep .ngxe-popover.imgc-ctnr .imgc-ctnt.is-image .ngx-insert-img-ph .ngxe-img-upl-frm input{cursor:pointer;position:absolute;right:0;top:0;bottom:0;margin:0}`],\n  providers: [PopoverConfig]\n})\n\nexport class NgxEditorToolbarComponent implements OnInit {\n\n  /** holds values of the insert link form */\n  urlForm: FormGroup;\n  /** holds values of the insert image form */\n  imageForm: FormGroup;\n  /** holds values of the insert video form */\n  videoForm: FormGroup;\n  /** set to false when image is being uploaded */\n  uploadComplete = true;\n  /** upload percentage */\n  updloadPercentage = 0;\n  /** set to true when the image is being uploaded */\n  isUploading = false;\n  /** which tab to active for color insetion */\n  selectedColorTab = 'textColor';\n  /** font family name */\n  fontName = '';\n  /** font size */\n  fontSize = '';\n  /** hex color code */\n  hexColor = '';\n  /** show/hide image uploader */\n  isImageUploader = false;\n\n  /**\n   * Editor configuration\n   */\n  @Input() config: any;\n  @ViewChild('urlPopover') urlPopover;\n  @ViewChild('imagePopover') imagePopover;\n  @ViewChild('videoPopover') videoPopover;\n  @ViewChild('fontSizePopover') fontSizePopover;\n  @ViewChild('colorPopover') colorPopover;\n  /**\n   * Emits an event when a toolbar button is clicked\n   */\n  @Output() execute: EventEmitter<string> = new EventEmitter<string>();\n\n  constructor(private _popOverConfig: PopoverConfig,\n              private _formBuilder: FormBuilder,\n              private _messageService: MessageService,\n              private _commandExecutorService: CommandExecutorService) {\n    this._popOverConfig.outsideClick = true;\n    this._popOverConfig.placement = 'bottom';\n    this._popOverConfig.container = 'body';\n  }\n\n  /**\n   * enable or diable toolbar based on configuration\n   *\n   * @param value name of the toolbar buttons\n   */\n  canEnableToolbarOptions(value): boolean {\n    return Utils.canEnableToolbarOptions(value, this.config['toolbar']);\n  }\n\n  /**\n   * triggers command from the toolbar to be executed and emits an event\n   *\n   * @param command name of the command to be executed\n   */\n  triggerCommand(command: string): void {\n    this.execute.emit(command);\n  }\n\n  /**\n   * create URL insert form\n   */\n  buildUrlForm(): void {\n\n    this.urlForm = this._formBuilder.group({\n      urlLink: ['', [Validators.required]],\n      urlText: ['', [Validators.required]],\n      urlNewTab: [true]\n    });\n\n    return;\n  }\n\n  /**\n   * inserts link in the editor\n   */\n  insertLink(): void {\n\n    try {\n      this._commandExecutorService.createLink(this.urlForm.value);\n    } catch (error) {\n      this._messageService.sendMessage(error.message);\n    }\n\n    /** reset form to default */\n    this.buildUrlForm();\n    /** close inset URL pop up */\n    this.urlPopover.hide();\n\n    return;\n  }\n\n  /**\n   * create insert image form\n   */\n  buildImageForm(): void {\n\n    this.imageForm = this._formBuilder.group({\n      imageUrl: ['', [Validators.required]]\n    });\n\n    return;\n  }\n\n  /**\n   * create insert image form\n   */\n  buildVideoForm(): void {\n\n    this.videoForm = this._formBuilder.group({\n      videoUrl: ['', [Validators.required]],\n      height: [''],\n      width: ['']\n    });\n\n    return;\n  }\n\n  /**\n   * Executed when file is selected\n   *\n   * @param e onChange event\n   */\n  onFileChange(e): void {\n\n    this.uploadComplete = false;\n    this.isUploading = true;\n\n    if (e.target.files.length > 0) {\n      const file = e.target.files[0];\n\n      try {\n        this._commandExecutorService.uploadImage(file, this.config.imageEndPoint, this.config.headers).subscribe(event => {\n\n          if (event.type) {\n            this.updloadPercentage = Math.round(100 * event.loaded / event.total);\n          }\n\n          if (event instanceof HttpResponse) {\n            try {\n              if (this.config.responseEndPoint) {\n                console.log(this.config.responseEndPoint + event.body.url);\n                this._commandExecutorService.insertImage(this.config.responseEndPoint + event.body.url);\n              } else {\n                console.log(event.body.url);\n                this._commandExecutorService.insertImage(event.body.url);\n              }\n            } catch (error) {\n              this._messageService.sendMessage(error.message);\n            }\n            this.uploadComplete = true;\n            this.isUploading = false;\n          }\n        });\n      } catch (error) {\n        this._messageService.sendMessage(error.message);\n        this.uploadComplete = true;\n        this.isUploading = false;\n      }\n\n    }\n\n    return;\n  }\n\n  /** insert image in the editor */\n  insertImage(): void {\n    try {\n      this._commandExecutorService.insertImage(this.imageForm.value.imageUrl);\n    } catch (error) {\n      this._messageService.sendMessage(error.message);\n    }\n\n    /** reset form to default */\n    this.buildImageForm();\n    /** close inset URL pop up */\n    this.imagePopover.hide();\n\n    return;\n  }\n\n  /** insert image in the editor */\n  insertVideo(): void {\n    try {\n      this._commandExecutorService.insertVideo(this.videoForm.value);\n    } catch (error) {\n      this._messageService.sendMessage(error.message);\n    }\n\n    /** reset form to default */\n    this.buildVideoForm();\n    /** close inset URL pop up */\n    this.videoPopover.hide();\n\n    return;\n  }\n\n  /** inser text/background color */\n  insertColor(color: string, where: string): void {\n\n    try {\n      this._commandExecutorService.insertColor(color, where);\n    } catch (error) {\n      this._messageService.sendMessage(error.message);\n    }\n\n    this.colorPopover.hide();\n    return;\n  }\n\n  /** set font size */\n  setFontSize(fontSize: string): void {\n\n    try {\n      this._commandExecutorService.setFontSize(fontSize);\n    } catch (error) {\n      this._messageService.sendMessage(error.message);\n    }\n\n    this.fontSizePopover.hide();\n    return;\n  }\n\n  /** set font Name/family */\n  setFontName(fontName: string): void {\n\n    try {\n      this._commandExecutorService.setFontName(fontName);\n    } catch (error) {\n      this._messageService.sendMessage(error.message);\n    }\n\n    this.fontSizePopover.hide();\n    return;\n  }\n\n  /**\n   * allow only numbers\n   *\n   * @param event keypress event\n   */\n  onlyNumbers(event: KeyboardEvent): boolean {\n    return event.charCode >= 48 && event.charCode <= 57;\n  }\n\n  ngOnInit() {\n    this.buildUrlForm();\n    this.buildImageForm();\n    this.buildVideoForm();\n  }\n\n}\n",
    "import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { FormsModule } from '@angular/forms';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { PopoverModule } from 'ngx-bootstrap';\nimport { NgxEditorComponent } from './ngx-editor.component';\nimport { NgxGrippieComponent } from './ngx-grippie/ngx-grippie.component';\nimport { NgxEditorMessageComponent } from './ngx-editor-message/ngx-editor-message.component';\nimport { NgxEditorToolbarComponent } from './ngx-editor-toolbar/ngx-editor-toolbar.component';\nimport { MessageService } from './common/services/message.service';\nimport { CommandExecutorService } from './common/services/command-executor.service';\n\n@NgModule({\n  imports: [CommonModule, FormsModule, ReactiveFormsModule, PopoverModule.forRoot()],\n  declarations: [NgxEditorComponent, NgxGrippieComponent, NgxEditorMessageComponent, NgxEditorToolbarComponent],\n  exports: [NgxEditorComponent, PopoverModule],\n  providers: [CommandExecutorService, MessageService]\n})\n\nexport class NgxEditorModule { }\n"
  ],
  "names": [
    "canEnableToolbarOptions",
    "value",
    "toolbar",
    "filter",
    "array",
    "indexOf",
    "length",
    "saveSelection",
    "window",
    "getSelection",
    "sel",
    "getRangeAt",
    "rangeCount",
    "document",
    "createRange",
    "restoreSelection",
    "range",
    "removeAllRanges",
    "addRange",
    "select",
    "ngxEditorConfig",
    "input",
    "i",
    "undefined",
    "hasOwnProperty",
    "resizer",
    "CommandExecutorService",
    "_http",
    "this",
    "savedSelection",
    "prototype",
    "execute",
    "command",
    "Error",
    "execCommand",
    "insertImage",
    "imageURI",
    "console",
    "log",
    "Utils.restoreSelection",
    "insertVideo",
    "videParams",
    "isYoutubeLink",
    "videoUrl",
    "youtubeURL",
    "width",
    "height",
    "insertHtml",
    "checkTagSupportInBrowser",
    "isValidURL",
    "videoSrc",
    "url",
    "test",
    "uploadImage",
    "file",
    "endPoint",
    "headers",
    "formData",
    "FormData",
    "append",
    "requestHeader",
    "HttpHeaders",
    "headerKeys",
    "Object",
    "keys",
    "headerKeys_1",
    "o",
    "m",
    "Symbol",
    "iterator",
    "call",
    "next",
    "done",
    "tslib_1.__values",
    "headerKeys_1_1",
    "headerKey",
    "set",
    "req",
    "HttpRequest",
    "reportProgress",
    "request",
    "createLink",
    "params",
    "urlNewTab",
    "newUrl",
    "urlLink",
    "urlText",
    "type",
    "insertColor",
    "color",
    "where",
    "checkSelection",
    "setFontSize",
    "fontSize",
    "deletedValue",
    "deleteAndGetElement",
    "isNumeric",
    "fontPx",
    "setFontName",
    "fontName",
    "fontFamily",
    "html",
    "slectedText",
    "toString",
    "deleteContents",
    "tag",
    "createElement",
    "HTMLUnknownElement",
    "Injectable",
    "HttpClient",
    "MessageService",
    "message",
    "Subject",
    "getMessage",
    "asObservable",
    "sendMessage",
    "clearMessageIn",
    "milliseconds",
    "_this",
    "setTimeout",
    "editable",
    "spellcheck",
    "minHeight",
    "minWidth",
    "translate",
    "enableToolbar",
    "showToolbar",
    "placeholder",
    "imageEndPoint",
    "responseEndPoint",
    "appendImageEndPointToResponse",
    "codeMirrorConfig",
    "lineNumbers",
    "gutter",
    "lineWrapping",
    "mode",
    "autofocus",
    "htmlMode",
    "NgxEditorComponent",
    "_messageService",
    "_commandExecutor",
    "_renderer",
    "config",
    "blur",
    "EventEmitter",
    "focus",
    "Utils",
    "codeEditorMode",
    "ngxCodeMirror",
    "onTextAreaFocus",
    "emit",
    "onEditorFocus",
    "textArea",
    "nativeElement",
    "onContentChange",
    "onChange",
    "togglePlaceholder",
    "onTextAreaBlur",
    "Utils.saveSelection",
    "onTouched",
    "resizeTextArea",
    "offsetY",
    "newHeight",
    "parseInt",
    "style",
    "setSize",
    "executeCommand",
    "commandName",
    "error",
    "toggleCodeEditor",
    "writeValue",
    "refreshView",
    "registerOnChange",
    "fn",
    "registerOnTouched",
    "normalizedValue",
    "setProperty",
    "CodeMirror.fromTextArea",
    "codeEditor",
    "setValue",
    "innerHTML",
    "toTextArea",
    "getValue",
    "removeClass",
    "ngxWrapper",
    "addClass",
    "getCollectiveParams",
    "ngOnInit",
    "getEditorConfiguration",
    "offsetHeight",
    "Component",
    "args",
    "selector",
    "template",
    "styles",
    "providers",
    "provide",
    "NG_VALUE_ACCESSOR",
    "useExisting",
    "forwardRef",
    "multi",
    "Renderer2",
    "Input",
    "Output",
    "ViewChild",
    "NgxGrippieComponent",
    "_editorComponent",
    "oldY",
    "grabber",
    "onMouseMove",
    "event",
    "clientY",
    "onMouseUp",
    "onResize",
    "preventDefault",
    "HostListener",
    "NgxEditorMessageComponent",
    "ngxMessage",
    "subscribe",
    "clearMessage",
    "NgxEditorToolbarComponent",
    "_popOverConfig",
    "_formBuilder",
    "_commandExecutorService",
    "uploadComplete",
    "updloadPercentage",
    "isUploading",
    "selectedColorTab",
    "hexColor",
    "isImageUploader",
    "outsideClick",
    "placement",
    "container",
    "Utils.canEnableToolbarOptions",
    "triggerCommand",
    "buildUrlForm",
    "urlForm",
    "group",
    "Validators",
    "required",
    "insertLink",
    "urlPopover",
    "hide",
    "buildImageForm",
    "imageForm",
    "imageUrl",
    "buildVideoForm",
    "videoForm",
    "onFileChange",
    "e",
    "target",
    "files",
    "Math",
    "round",
    "loaded",
    "total",
    "HttpResponse",
    "body",
    "imagePopover",
    "videoPopover",
    "colorPopover",
    "fontSizePopover",
    "onlyNumbers",
    "charCode",
    "PopoverConfig",
    "FormBuilder",
    "NgxEditorModule",
    "NgModule",
    "imports",
    "CommonModule",
    "FormsModule",
    "ReactiveFormsModule",
    "PopoverModule",
    "forRoot",
    "declarations",
    "exports"
  ],
  "mappings": "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"
}
